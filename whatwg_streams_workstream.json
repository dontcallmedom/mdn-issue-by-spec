{
    "version": "https://jsonfeed.org/version/1",
    "title": "WHATWG Streams Workstream-relevant MDN issues",
    "home_page_url": "https://dontcallmedom.github.io/mdn-issue-by-spec/whatwg_streams_workstream.rss",
    "description": "Issue filed on MDN Web Docs related to pages attached to technologies developed by WHATWG Streams Workstream",
    "author": {
        "name": "mdn-issue-by-spec",
        "url": "https://github.com/dontcallmedom/mdn-issue-by-spec"
    },
    "items": [
        {
            "id": "https://github.com/mdn/content/issues/23299",
            "content_html": "<h3 dir=\"auto\">MDN URL</h3>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream</a></p>\n<h3 dir=\"auto\">What specific section or headline is this issue about?</h3>\n<p dir=\"auto\">The example</p>\n<h3 dir=\"auto\">What information was incorrect, unhelpful, or incomplete?</h3>\n<p dir=\"auto\">The example is this one:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"fetch('https://www.example.org')\n  .then((response) =&gt; response.body)\n  .then((rb) =&gt; {\n    const reader = rb.getReader();\n\n    return new ReadableStream({\n      start(controller) {\n        // The following function handles each data chunk\n        function push() {\n          // &quot;done&quot; is a Boolean and value a &quot;Uint8Array&quot;\n          reader.read().then(({ done, value }) =&gt; {\n            // If there is no more data to read\n            if (done) {\n              console.log('done', done);\n              controller.close();\n              return;\n            }\n            // Get the data and send it to the browser via the controller\n            controller.enqueue(value);\n            // Check chunks by logging to the console\n            console.log(done, value);\n            push();\n          });\n        }\n\n        push();\n      },\n    });\n  })\n  .then((stream) =&gt;\n    // Respond with our stream\n    new Response(stream, { headers: { 'Content-Type': 'text/html' } }).text()\n  )\n  .then((result) =&gt; {\n    // Do things with result\n    console.log(result);\n  });\n\"><pre class=\"notranslate\"><span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'https://www.example.org'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">response</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">response</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">body</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">rb</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">reader</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">rb</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getReader</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">ReadableStream</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">start</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">controller</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c\">// The following function handles each data chunk</span>\n        <span class=\"pl-k\">function</span> <span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-c\">// \"done\" is a Boolean and value a \"Uint8Array\"</span>\n          <span class=\"pl-s1\">reader</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">read</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> done<span class=\"pl-kos\">,</span> value <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-c\">// If there is no more data to read</span>\n            <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">done</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n              <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'done'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">done</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n              <span class=\"pl-s1\">controller</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">close</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n              <span class=\"pl-k\">return</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-kos\">}</span>\n            <span class=\"pl-c\">// Get the data and send it to the browser via the controller</span>\n            <span class=\"pl-s1\">controller</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">enqueue</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-c\">// Check chunks by logging to the console</span>\n            <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">done</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n          <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span>\n\n        <span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">stream</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span>\n    <span class=\"pl-c\">// Respond with our stream</span>\n    <span class=\"pl-k\">new</span> <span class=\"pl-v\">Response</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">stream</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">headers</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-s\">'Content-Type'</span>: <span class=\"pl-s\">'text/html'</span> <span class=\"pl-kos\">}</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">text</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// Do things with result</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">I found it confusing because it is mixing both the <strong>how to consume</strong> and <strong>how to produce</strong> a Stream if I am correct.</p>\n<h3 dir=\"auto\">What did you expect to see?</h3>\n<p dir=\"auto\">As a person that is learning I don't really get from here a recipe for using it. Wouldn't it be better to split this into two pieces, one where it is shown how to read, and other where - maybe a server - creates a Stream for a Response ?</p>\n<h3 dir=\"auto\">Do you have any supporting links, references, or citations?</h3>\n<p dir=\"auto\"><em>No response</em></p>\n<h3 dir=\"auto\">Do you have anything more you want to share?</h3>\n<p dir=\"auto\">I may just be misunderstanding the example.</p>\n<p dir=\"auto\">Thanks for the patience !</p>\n<h3 dir=\"auto\">MDN metadata</h3>\n\n<details>\n<summary>Page report details</summary>\n<ul dir=\"auto\">\n<li>Folder: <code class=\"notranslate\">en-us/web/api/readablestream</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/api/readablestream/index.md\">https://github.com/mdn/content/blob/main/files/en-us/web/api/readablestream/index.md</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/06105598d11001e9f12d80ad05087f1df3c0634b/hovercard\" href=\"https://github.com/mdn/content/commit/06105598d11001e9f12d80ad05087f1df3c0634b\"><tt>0610559</tt></a></li>\n<li>Document last modified: 2022-10-10T09:00:13.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/23299",
            "title": "[streams] ReadableStream example mixes creation and consumption",
            "date_modified": "2023-01-01T13:20:04.000Z",
            "author": {
                "name": "santimirandarp",
                "url": "https://github.com/santimirandarp"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/11494",
            "content_html": "<p dir=\"auto\">MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter</a></p>\n<h4 dir=\"auto\">What information was incorrect, unhelpful, or incomplete?</h4>\n<p dir=\"auto\">Im am referring to this example currently on<br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter</a>:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const list = document.querySelector('ul');\n\nfunction sendMessage(message, writableStream) {\n\t// defaultWriter is of type WritableStreamDefaultWriter\n\tconst defaultWriter = writableStream.getWriter();\n\tconst encoder = new TextEncoder();\n\tconst encoded = encoder.encode(message, { stream: true });\n\tencoded.forEach((chunk) =&gt; {\n\t\tdefaultWriter.ready\n\t\t\t.then(() =&gt; {\n\t\t\t\treturn defaultWriter.write(chunk);\n\t\t\t})\n\t\t\t.then(() =&gt; {\n\t\t\t\tconsole.log(&quot;Chunk written to sink.&quot;);\n\t\t\t})\n\t\t\t.catch((err) =&gt; {\n\t\t\t\tconsole.log(&quot;Chunk error:&quot;, err);\n\t\t\t});\n\t});\n\t// Call ready again to ensure that all chunks are written\n\t//   before closing the writer.\n\tdefaultWriter.ready\n\t\t.then(() =&gt; {\n\t\t\tdefaultWriter.close();\n\t\t})\n\t\t.then(() =&gt; {\n\t\t\tconsole.log(&quot;All chunks written&quot;);\n\t\t})\n\t\t.catch((err) =&gt; {\n\t\t\tconsole.log(&quot;Stream error:&quot;, err);\n\t\t});\n}\n\nconst decoder = new TextDecoder(&quot;utf-8&quot;);\nconst queuingStrategy = new CountQueuingStrategy({ highWaterMark: 1 });\nlet result = &quot;&quot;;\nconst writableStream = new WritableStream({\n\t// Implement the sink\n\twrite(chunk) {\n\t\treturn new Promise((resolve, reject) =&gt; {\n\t\t\tvar buffer = new ArrayBuffer(2);\n\t\t\tvar view = new Uint16Array(buffer);\n\t\t\tview[0] = chunk;\n\t\t\tvar decoded = decoder.decode(view, { stream: true });\n\t\t\tvar listItem = document.createElement('li');\n\t\t\tlistItem.textContent = &quot;Chunk decoded: &quot; + decoded;\n\t\t\tlist.appendChild(listItem);\n\t\t\tresult += decoded;\n\t\t\tresolve();\n\t\t});\n\t},\n\tclose() {\n\t\tvar listItem = document.createElement('li');\n\t\tlistItem.textContent = &quot;[MESSAGE RECEIVED] &quot; + result;\n\t\tlist.appendChild(listItem);\n\t},\n\tabort(err) {\n\t\tconsole.log(&quot;Sink error:&quot;, err);\n\t}\n}, queuingStrategy);\n\nsendMessage(&quot;Hello, world.&quot;, writableStream);\n\"><pre lang=\"js\" class=\"notranslate\"><code class=\"notranslate\">const list = document.querySelector('ul');\n\nfunction sendMessage(message, writableStream) {\n\t// defaultWriter is of type WritableStreamDefaultWriter\n\tconst defaultWriter = writableStream.getWriter();\n\tconst encoder = new TextEncoder();\n\tconst encoded = encoder.encode(message, { stream: true });\n\tencoded.forEach((chunk) =&gt; {\n\t\tdefaultWriter.ready\n\t\t\t.then(() =&gt; {\n\t\t\t\treturn defaultWriter.write(chunk);\n\t\t\t})\n\t\t\t.then(() =&gt; {\n\t\t\t\tconsole.log(\"Chunk written to sink.\");\n\t\t\t})\n\t\t\t.catch((err) =&gt; {\n\t\t\t\tconsole.log(\"Chunk error:\", err);\n\t\t\t});\n\t});\n\t// Call ready again to ensure that all chunks are written\n\t//   before closing the writer.\n\tdefaultWriter.ready\n\t\t.then(() =&gt; {\n\t\t\tdefaultWriter.close();\n\t\t})\n\t\t.then(() =&gt; {\n\t\t\tconsole.log(\"All chunks written\");\n\t\t})\n\t\t.catch((err) =&gt; {\n\t\t\tconsole.log(\"Stream error:\", err);\n\t\t});\n}\n\nconst decoder = new TextDecoder(\"utf-8\");\nconst queuingStrategy = new CountQueuingStrategy({ highWaterMark: 1 });\nlet result = \"\";\nconst writableStream = new WritableStream({\n\t// Implement the sink\n\twrite(chunk) {\n\t\treturn new Promise((resolve, reject) =&gt; {\n\t\t\tvar buffer = new ArrayBuffer(2);\n\t\t\tvar view = new Uint16Array(buffer);\n\t\t\tview[0] = chunk;\n\t\t\tvar decoded = decoder.decode(view, { stream: true });\n\t\t\tvar listItem = document.createElement('li');\n\t\t\tlistItem.textContent = \"Chunk decoded: \" + decoded;\n\t\t\tlist.appendChild(listItem);\n\t\t\tresult += decoded;\n\t\t\tresolve();\n\t\t});\n\t},\n\tclose() {\n\t\tvar listItem = document.createElement('li');\n\t\tlistItem.textContent = \"[MESSAGE RECEIVED] \" + result;\n\t\tlist.appendChild(listItem);\n\t},\n\tabort(err) {\n\t\tconsole.log(\"Sink error:\", err);\n\t}\n}, queuingStrategy);\n\nsendMessage(\"Hello, world.\", writableStream);\n\n</code></pre></div>\n<p dir=\"auto\">Preliminary note: Note that <code class=\"notranslate\">then</code> is called multiple<br>\ntimes <em>on the same</em> <code class=\"notranslate\">Promise</code> (branching, not chaining):<br>\n<code class=\"notranslate\">defaultWriter.ready.then</code> is called multiple times.</p>\n<p dir=\"auto\">When a write <code class=\"notranslate\">Promise</code> rejects, we see the problems with<br>\nthe code. Assume the first chunk's write promise rejects:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">The error handler printing <code class=\"notranslate\">\"Chunk error:\", err</code> is called<br>\n13 times (not just once for the failing chunk): all<br>\nchunks (their \"tasks\") are immediately enqueued by<br>\n<code class=\"notranslate\">defaultWriter.ready</code> (not in the writer/stream's queue).</p>\n</li>\n<li>\n<p dir=\"auto\">The error handler registered for the closing task<br>\n(printing <code class=\"notranslate\">\"Stream error:\", err</code>) is not called at all.<br>\nThe error resulting from calling <code class=\"notranslate\">defaultWriter.close()</code><br>\nis unhandled. Instead of:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"defaultWriter.close();\"><pre class=\"notranslate\"><code class=\"notranslate\">defaultWriter.close();\n</code></pre></div>\n<p dir=\"auto\">it should be</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"return defaultWriter.close();\"><pre class=\"notranslate\"><code class=\"notranslate\">return defaultWriter.close();\n</code></pre></div>\n</li>\n</ul>\n<h4 dir=\"auto\">Specific section or headline?</h4>\n<p dir=\"auto\">Section \"Examples\": <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter#examples\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter#examples</a></p>\n<p dir=\"auto\">Note that the example might also be here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/close\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/close</a></p>\n<h4 dir=\"auto\">What did you expect to see?</h4>\n<p dir=\"auto\">I would love to see an example that:</p>\n<ul dir=\"auto\">\n<li>handles errors / <code class=\"notranslate\">Promise</code> rejections decently (handling a single error once, no unhandled errors, handling errors from <code class=\"notranslate\">close</code>, no writing attempts after error)</li>\n<li>does not use \"branching\" <code class=\"notranslate\">then</code> when \"chaining\" <code class=\"notranslate\">then</code> or <code class=\"notranslate\">async</code>/<code class=\"notranslate\">await</code> could easily be used (this example shows the confusion that can arise)</li>\n</ul>\n<h4 dir=\"auto\">Did you test this? If so, how?</h4>\n<p dir=\"auto\">Yes, I tested this. To reproduce:</p>\n<ul dir=\"auto\">\n<li>Download the code from \"<a href=\"https://mdn.github.io/dom-examples/streams/simple-writer/\" rel=\"nofollow\">https://mdn.github.io/dom-examples/streams/simple-writer/</a>\"</li>\n<li><code class=\"notranslate\">reject</code> some <code class=\"notranslate\">Promise</code> (the one already explicitly in the code or add one to <code class=\"notranslate\">reject</code>).</li>\n<li>Run the code in a browser already supporting <code class=\"notranslate\">WritableStream</code>s.</li>\n</ul>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul dir=\"auto\">\n<li>Folder: <code class=\"notranslate\">en-us/web/api/writablestreamdefaultwriter</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/api/writablestreamdefaultwriter/index.md\">https://github.com/mdn/content/blob/main/files/en-us/web/api/writablestreamdefaultwriter/index.md</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/2279e5ae6c229c707a014a22aa1ec4635a0f981f/hovercard\" href=\"https://github.com/mdn/content/commit/2279e5ae6c229c707a014a22aa1ec4635a0f981f\"><tt>2279e5a</tt></a></li>\n<li>Document last modified: 2021-09-14T18:08:09.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/11494",
            "title": "[streams] Issue with \"WritableStreamDefaultWriter\": (Incorrect/Problematic Example)",
            "date_modified": "2021-12-26T17:35:24.000Z",
            "author": {
                "name": "watuwo",
                "url": "https://github.com/watuwo"
            }
        }
    ]
}