{
    "version": "https://jsonfeed.org/version/1",
    "title": "WHATWG Streams Workstream-relevant MDN issues",
    "home_page_url": "https://dontcallmedom.github.io/mdn-issue-by-spec/whatwg_streams_workstream.rss",
    "description": "Issue filed on MDN Web Docs related to pages attached to technologies developed by WHATWG Streams Workstream",
    "author": {
        "name": "mdn-issue-by-spec",
        "url": "https://github.com/dontcallmedom/mdn-issue-by-spec"
    },
    "items": [
        {
            "id": "https://github.com/mdn/content/issues/11494",
            "content_html": "<p dir=\"auto\">MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter</a></p>\n<h4 dir=\"auto\">What information was incorrect, unhelpful, or incomplete?</h4>\n<p dir=\"auto\">Im am referring to this example currently on<br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter</a>:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const list = document.querySelector('ul');\n\nfunction sendMessage(message, writableStream) {\n\t// defaultWriter is of type WritableStreamDefaultWriter\n\tconst defaultWriter = writableStream.getWriter();\n\tconst encoder = new TextEncoder();\n\tconst encoded = encoder.encode(message, { stream: true });\n\tencoded.forEach((chunk) =&gt; {\n\t\tdefaultWriter.ready\n\t\t\t.then(() =&gt; {\n\t\t\t\treturn defaultWriter.write(chunk);\n\t\t\t})\n\t\t\t.then(() =&gt; {\n\t\t\t\tconsole.log(&quot;Chunk written to sink.&quot;);\n\t\t\t})\n\t\t\t.catch((err) =&gt; {\n\t\t\t\tconsole.log(&quot;Chunk error:&quot;, err);\n\t\t\t});\n\t});\n\t// Call ready again to ensure that all chunks are written\n\t//   before closing the writer.\n\tdefaultWriter.ready\n\t\t.then(() =&gt; {\n\t\t\tdefaultWriter.close();\n\t\t})\n\t\t.then(() =&gt; {\n\t\t\tconsole.log(&quot;All chunks written&quot;);\n\t\t})\n\t\t.catch((err) =&gt; {\n\t\t\tconsole.log(&quot;Stream error:&quot;, err);\n\t\t});\n}\n\nconst decoder = new TextDecoder(&quot;utf-8&quot;);\nconst queuingStrategy = new CountQueuingStrategy({ highWaterMark: 1 });\nlet result = &quot;&quot;;\nconst writableStream = new WritableStream({\n\t// Implement the sink\n\twrite(chunk) {\n\t\treturn new Promise((resolve, reject) =&gt; {\n\t\t\tvar buffer = new ArrayBuffer(2);\n\t\t\tvar view = new Uint16Array(buffer);\n\t\t\tview[0] = chunk;\n\t\t\tvar decoded = decoder.decode(view, { stream: true });\n\t\t\tvar listItem = document.createElement('li');\n\t\t\tlistItem.textContent = &quot;Chunk decoded: &quot; + decoded;\n\t\t\tlist.appendChild(listItem);\n\t\t\tresult += decoded;\n\t\t\tresolve();\n\t\t});\n\t},\n\tclose() {\n\t\tvar listItem = document.createElement('li');\n\t\tlistItem.textContent = &quot;[MESSAGE RECEIVED] &quot; + result;\n\t\tlist.appendChild(listItem);\n\t},\n\tabort(err) {\n\t\tconsole.log(&quot;Sink error:&quot;, err);\n\t}\n}, queuingStrategy);\n\nsendMessage(&quot;Hello, world.&quot;, writableStream);\n\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">list</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">document</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">querySelector</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'ul'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">sendMessage</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">message</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">writableStream</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t<span class=\"pl-c\">// defaultWriter is of type WritableStreamDefaultWriter</span>\n\t<span class=\"pl-k\">const</span> <span class=\"pl-s1\">defaultWriter</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">writableStream</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getWriter</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-k\">const</span> <span class=\"pl-s1\">encoder</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">TextEncoder</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-k\">const</span> <span class=\"pl-s1\">encoded</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">encoder</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">encode</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">message</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">stream</span>: <span class=\"pl-c1\">true</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-s1\">encoded</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">chunk</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-s1\">defaultWriter</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">ready</span>\n\t\t\t<span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n\t\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">defaultWriter</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">write</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">chunk</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\t\t\t<span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n\t\t\t\t<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Chunk written to sink.\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\t\t\t<span class=\"pl-kos\">.</span><span class=\"pl-en\">catch</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n\t\t\t\t<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Chunk error:\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-c\">// Call ready again to ensure that all chunks are written</span>\n\t<span class=\"pl-c\">//   before closing the writer.</span>\n\t<span class=\"pl-s1\">defaultWriter</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">ready</span>\n\t\t<span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n\t\t\t<span class=\"pl-s1\">defaultWriter</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">close</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\t\t<span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n\t\t\t<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"All chunks written\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\t\t<span class=\"pl-kos\">.</span><span class=\"pl-en\">catch</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n\t\t\t<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Stream error:\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">decoder</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">TextDecoder</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"utf-8\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">queuingStrategy</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">CountQueuingStrategy</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">highWaterMark</span>: <span class=\"pl-c1\">1</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">writableStream</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">WritableStream</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n\t<span class=\"pl-c\">// Implement the sink</span>\n\t<span class=\"pl-en\">write</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">chunk</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n\t\t\t<span class=\"pl-k\">var</span> <span class=\"pl-s1\">buffer</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">ArrayBuffer</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-k\">var</span> <span class=\"pl-s1\">view</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Uint16Array</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">buffer</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-s1\">view</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">chunk</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-k\">var</span> <span class=\"pl-s1\">decoded</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">decoder</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">decode</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">view</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">stream</span>: <span class=\"pl-c1\">true</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-k\">var</span> <span class=\"pl-s1\">listItem</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">document</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">createElement</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'li'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-s1\">listItem</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">textContent</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"Chunk decoded: \"</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">decoded</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-s1\">list</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">appendChild</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">listItem</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-s1\">result</span> <span class=\"pl-c1\">+=</span> <span class=\"pl-s1\">decoded</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-en\">close</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-k\">var</span> <span class=\"pl-s1\">listItem</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">document</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">createElement</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'li'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-s1\">listItem</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">textContent</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"[MESSAGE RECEIVED] \"</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-s1\">list</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">appendChild</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">listItem</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-en\">abort</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Sink error:\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">queuingStrategy</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">sendMessage</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Hello, world.\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">writableStream</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">Preliminary note: Note that <code class=\"notranslate\">then</code> is called multiple<br>\ntimes <em>on the same</em> <code class=\"notranslate\">Promise</code> (branching, not chaining):<br>\n<code class=\"notranslate\">defaultWriter.ready.then</code> is called multiple times.</p>\n<p dir=\"auto\">When a write <code class=\"notranslate\">Promise</code> rejects, we see the problems with<br>\nthe code. Assume the first chunk's write promise rejects:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">The error handler printing <code class=\"notranslate\">\"Chunk error:\", err</code> is called<br>\n13 times (not just once for the failing chunk): all<br>\nchunks (their \"tasks\") are immediately enqueued by<br>\n<code class=\"notranslate\">defaultWriter.ready</code> (not in the writer/stream's queue).</p>\n</li>\n<li>\n<p dir=\"auto\">The error handler registered for the closing task<br>\n(printing <code class=\"notranslate\">\"Stream error:\", err</code>) is not called at all.<br>\nThe error resulting from calling <code class=\"notranslate\">defaultWriter.close()</code><br>\nis unhandled. Instead of:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"defaultWriter.close();\"><pre class=\"notranslate\"><code class=\"notranslate\">defaultWriter.close();\n</code></pre></div>\n<p dir=\"auto\">it should be</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"return defaultWriter.close();\"><pre class=\"notranslate\"><code class=\"notranslate\">return defaultWriter.close();\n</code></pre></div>\n</li>\n</ul>\n<h4 dir=\"auto\">Specific section or headline?</h4>\n<p dir=\"auto\">Section \"Examples\": <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter#examples\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter#examples</a></p>\n<p dir=\"auto\">Note that the example might also be here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/close\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/close</a></p>\n<h4 dir=\"auto\">What did you expect to see?</h4>\n<p dir=\"auto\">I would love to see an example that:</p>\n<ul dir=\"auto\">\n<li>handles errors / <code class=\"notranslate\">Promise</code> rejections decently (handling a single error once, no unhandled errors, handling errors from <code class=\"notranslate\">close</code>, no writing attempts after error)</li>\n<li>does not use \"branching\" <code class=\"notranslate\">then</code> when \"chaining\" <code class=\"notranslate\">then</code> or <code class=\"notranslate\">async</code>/<code class=\"notranslate\">await</code> could easily be used (this example shows the confusion that can arise)</li>\n</ul>\n<h4 dir=\"auto\">Did you test this? If so, how?</h4>\n<p dir=\"auto\">Yes, I tested this. To reproduce:</p>\n<ul dir=\"auto\">\n<li>Download the code from \"<a href=\"https://mdn.github.io/dom-examples/streams/simple-writer/\" rel=\"nofollow\">https://mdn.github.io/dom-examples/streams/simple-writer/</a>\"</li>\n<li><code class=\"notranslate\">reject</code> some <code class=\"notranslate\">Promise</code> (the one already explicitly in the code or add one to <code class=\"notranslate\">reject</code>).</li>\n<li>Run the code in a browser already supporting <code class=\"notranslate\">WritableStream</code>s.</li>\n</ul>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul dir=\"auto\">\n<li>Folder: <code class=\"notranslate\">en-us/web/api/writablestreamdefaultwriter</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/api/writablestreamdefaultwriter/index.md\">https://github.com/mdn/content/blob/main/files/en-us/web/api/writablestreamdefaultwriter/index.md</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/2279e5ae6c229c707a014a22aa1ec4635a0f981f/hovercard\" href=\"https://github.com/mdn/content/commit/2279e5ae6c229c707a014a22aa1ec4635a0f981f\"><tt>2279e5a</tt></a></li>\n<li>Document last modified: 2021-09-14T18:08:09.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/11494",
            "title": "[streams] Issue with \"WritableStreamDefaultWriter\": (Incorrect/Problematic Example)",
            "date_modified": "2021-12-26T17:35:24.000Z",
            "author": {
                "name": "watuwo",
                "url": "https://github.com/watuwo"
            }
        }
    ]
}