{
    "version": "https://jsonfeed.org/version/1",
    "title": "Ecma International TC39-relevant MDN issues",
    "home_page_url": "https://dontcallmedom.github.io/mdn-issue-by-spec/ecma_international_tc39.rss",
    "description": "Issue filed on MDN Web Docs related to pages attached to technologies developed by Ecma International TC39",
    "author": {
        "name": "mdn-issue-by-spec",
        "url": "https://github.com/dontcallmedom/mdn-issue-by-spec"
    },
    "items": [
        {
            "id": "https://github.com/mdn/content/issues/23112",
            "content_html": "<h3 dir=\"auto\">MDN URL</h3>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target</a></p>\n<h3 dir=\"auto\">What specific section or headline is this issue about?</h3>\n<p dir=\"auto\">try_it</p>\n<h3 dir=\"auto\">What information was incorrect, unhelpful, or incomplete?</h3>\n<p dir=\"auto\">I'm not a native English speaker. Unfortunately, I erroneously translated the message \"Foo() must <strong>be</strong> called with new\" in my head to just the opposite: \"Foo() must <strong>have been</strong> called with the new operator\". Hence I get confused about the behavior of the invocation. Please consider changing the message to a more clear version in active tense, e.g., \"You must call Foo() with 'new'. Abort. \".</p>\n<h3 dir=\"auto\">What did you expect to see?</h3>\n<p dir=\"auto\">just the opposite behavior</p>\n<h3 dir=\"auto\">Do you have any supporting links, references, or citations?</h3>\n<p dir=\"auto\"><em>No response</em></p>\n<h3 dir=\"auto\">Do you have anything more you want to share?</h3>\n<p dir=\"auto\"><em>No response</em></p>\n<h3 dir=\"auto\">MDN metadata</h3>\n\n<details>\n<summary>Page report details</summary>\n<ul dir=\"auto\">\n<li>Folder: <code class=\"notranslate\">en-us/web/javascript/reference/operators/new.target</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/new.target/index.md\">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/new.target/index.md</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/0f248adcab759bdad247a5dbfb7da12dc32bce59/hovercard\" href=\"https://github.com/mdn/content/commit/0f248adcab759bdad247a5dbfb7da12dc32bce59\"><tt>0f248ad</tt></a></li>\n<li>Document last modified: 2022-12-13T20:26:24.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/23112",
            "title": "[ecmascript] Change to a more clear message",
            "date_modified": "2022-12-21T14:46:05.000Z",
            "author": {
                "name": "JuergenPurtz",
                "url": "https://github.com/JuergenPurtz"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/22785",
            "content_html": "<h3 dir=\"auto\">MDN URL</h3>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#handling_rejected_promises\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#handling_rejected_promises</a></p>\n<h3 dir=\"auto\">What specific section or headline is this issue about?</h3>\n<p dir=\"auto\">Handling rejected promises</p>\n<h3 dir=\"auto\">What information was incorrect, unhelpful, or incomplete?</h3>\n<p dir=\"auto\"><code class=\"notranslate\">A sync function returns a Promise</code> is also a \"promisedFunction\", right?</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function promisedFunction() {\n  [](); // throws error\n  if (true) {\n    return Promise.reject();\n  }\n  return Promise.resolve();\n}\n(async () =&gt; {\n  const response = await promisedFunction().catch((err) =&gt; {\n    console.error(err);\n    return &quot;default response&quot;;\n  });\n  console.log(response);\n})();\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">promisedFunction</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// throws error</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reject</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">response</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">promisedFunction</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">catch</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s\">\"default response\"</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">response</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">Can't assume there will never be error, otherwise the error could be ignored (not every interpreter logs uncaught rejection).</p>\n<h3 dir=\"auto\">What did you expect to see?</h3>\n<p dir=\"auto\">Can't we just use <code class=\"notranslate\">promise</code>?</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const response = await promise.catch((err) =&gt; {\n  console.error(err);\n  return &quot;default response&quot;;\n});\n// response will be &quot;default response&quot; if the promise is rejected\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">response</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">catch</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s\">\"default response\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c\">// response will be \"default response\" if the promise is rejected</span></pre></div>\n<h3 dir=\"auto\">Do you have any supporting links, references, or citations?</h3>\n<p dir=\"auto\"><em>No response</em></p>\n<h3 dir=\"auto\">Do you have anything more you want to share?</h3>\n<p dir=\"auto\"><a href=\"https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/minecraft/server/player#runcommandasync\" rel=\"nofollow\">https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/minecraft/server/player#runcommandasync</a></p>\n<h3 dir=\"auto\">MDN metadata</h3>\n\n<details>\n<summary>Page report details</summary>\n<ul dir=\"auto\">\n<li>Folder: <code class=\"notranslate\">en-us/web/javascript/reference/operators/await</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/await/index.md\">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/await/index.md</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/0ad08fe1d8830f11e0314733f56e391affc1fe94/hovercard\" href=\"https://github.com/mdn/content/commit/0ad08fe1d8830f11e0314733f56e391affc1fe94\"><tt>0ad08fe</tt></a></li>\n<li>Document last modified: 2022-11-17T13:58:24.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/22785",
            "title": "[ecmascript] \"promisedFunction\" is confusing",
            "date_modified": "2022-12-07T05:27:56.000Z",
            "author": {
                "name": "Worldwidebrine",
                "url": "https://github.com/Worldwidebrine"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/22573",
            "content_html": "<h3 dir=\"auto\">MDN URL</h3>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#use_within_json\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#use_within_json</a></p>\n<h3 dir=\"auto\">What specific section or headline is this issue about?</h3>\n<p dir=\"auto\">Use Within JSON</p>\n<h3 dir=\"auto\">What information was incorrect, unhelpful, or incomplete?</h3>\n<p dir=\"auto\">The given code sample would only work if the JSON has BigInt values in a key named <code class=\"notranslate\">big</code>. This is almost never how you’d do it (you’d check the type of the value instead and make the replacer/reviver generic functions).</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const replacer = (key, value) =&gt; key === &quot;big&quot; ? value.toString() : value;\n\nconst data = {\n  number: 1,\n  big: 18014398509481982n,\n};\nconst stringified = JSON.stringify(data, replacer);\n\nconsole.log(stringified);\n// {&quot;number&quot;:1,&quot;big&quot;:&quot;18014398509481982&quot;}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">replacer</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">key</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">\"big\"</span> ? <span class=\"pl-s1\">value</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> : <span class=\"pl-s1\">value</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">data</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">number</span>: <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">big</span>: <span class=\"pl-c1\">18014398509481982n</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">stringified</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">JSON</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">stringify</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">replacer</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">stringified</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c\">// {\"number\":1,\"big\":\"18014398509481982\"}</span></pre></div>\n<p dir=\"auto\">Ditto for the reviver.</p>\n<h3 dir=\"auto\">What did you expect to see?</h3>\n<p dir=\"auto\">A generic replacer that people can copy/paste and use. e.g.,</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const data = {\n  small: -9223372036854775808n, \n  large: 18446744073709551615n\n}\nconst replacer = (_key, value) =&gt; typeof value === 'bigint' ? value.toString() : value\nconst stringified = JSON.stringify(data, replacer)\n\nconsole.log(stringified)\n// { &quot;small&quot;: &quot;-9223372036854775808&quot;, &quot;large&quot;: &quot;18446744073709551615&quot; }\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">data</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">small</span>: <span class=\"pl-c1\">-</span><span class=\"pl-c1\">9223372036854775808n</span><span class=\"pl-kos\">,</span> \n  <span class=\"pl-c1\">large</span>: <span class=\"pl-c1\">18446744073709551615n</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">replacer</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">_key</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">value</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'bigint'</span> ? <span class=\"pl-s1\">value</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> : <span class=\"pl-s1\">value</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">stringified</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">JSON</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">stringify</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">replacer</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">stringified</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// { \"small\": \"-9223372036854775808\", \"large\": \"18446744073709551615\" }</span></pre></div>\n<p dir=\"auto\">Ditto for the reviver.</p>\n<h3 dir=\"auto\">Do you have any supporting links, references, or citations?</h3>\n<p dir=\"auto\"><em>No response</em></p>\n<h3 dir=\"auto\">Do you have anything more you want to share?</h3>\n<p dir=\"auto\"><em>No response</em></p>",
            "url": "https://github.com/mdn/content/issues/22573",
            "title": "[ecmascript] BigInt replacer/reviver example is not generic",
            "date_modified": "2022-11-28T12:41:19.000Z",
            "author": {
                "name": "aral",
                "url": "https://github.com/aral"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/19220",
            "content_html": "<h2 dir=\"auto\">What is the new suggestion?</h2>\n<p dir=\"auto\">Document <a href=\"https://github.com/tc39/proposal-import-assertions\">import assertions</a>.</p>\n<h2 dir=\"auto\">Why is it important or useful?</h2>\n<p dir=\"auto\"><a href=\"https://v8.dev/features/import-assertions\" rel=\"nofollow\">Already shipped in V8 for over a year.</a> JSON modules have been unflagged in Node so a lot of people are starting to rely on it. Need more information on its syntax and semantics.</p>\n<p dir=\"auto\">Very importantly, import assertions do not change the semantics of the module itself—it cannot affect how the module is interpreted, nor can it be used as part of the cache key. Virtually all existing toolings, except JSON modules themselves (<code class=\"notranslate\">assert { type: \"json\" }</code>), that try to extend import assertions are using them in a spec-incompliant way. (TBH, that to me means the proposal is designed poorly.) We need to call that out.</p>\n<p dir=\"auto\">We just need a new section under <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import</a>, but with so many additions to JavaScript modules in the future, it may make sense to start a new reference chapter like \"modules\", parallel to the existing \"classes\" and \"functions\" chapters...</p>\n<h2 dir=\"auto\">Other supporting information</h2>\n<ul dir=\"auto\">\n<li>Spec draft: <a href=\"https://tc39.es/proposal-import-assertions/\" rel=\"nofollow\">https://tc39.es/proposal-import-assertions/</a></li>\n<li>Proposal: <a href=\"https://github.com/tc39/proposal-import-assertions\">https://github.com/tc39/proposal-import-assertions</a></li>\n<li>This is a sibling proposal of <a href=\"https://github.com/tc39/proposal-json-modules\">JSON modules</a>, so we should probably mention that as well.</li>\n<li>Only after this proposal does <code class=\"notranslate\">import()</code> have a second parameter and therefore optional trailing comma. <code class=\"notranslate\">import(\"foo\",)</code> works in Chrome but is a syntax error in Safari/Firefox. We need to add this to BCD and the trailing commas page: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas</a></li>\n</ul>",
            "url": "https://github.com/mdn/content/issues/19220",
            "title": "[ecmascript] Document import assertions",
            "date_modified": "2022-08-06T05:08:53.000Z",
            "author": {
                "name": "Josh-Cena",
                "url": "https://github.com/Josh-Cena"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/9974",
            "content_html": "<h2 dir=\"auto\">What page(s) did you find the problem on?</h2>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileReader/error\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/FileReader/error</a> says:</p>\n<blockquote>\n<p dir=\"auto\">In Chrome 48+/Firefox 58+ this property returns a DOMException because DOMError has been removed from the DOM standard.</p>\n</blockquote>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#regular_expressions\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#regular_expressions</a> says:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"typeof /s/ === 'function'; // Chrome 1-12 Non-conform to ECMAScript 5.1\ntypeof /s/ === 'object';   // Firefox 5+  Conform to ECMAScript 5.1\"><pre lang=\"js\" class=\"notranslate\"><code class=\"notranslate\">typeof /s/ === 'function'; // Chrome 1-12 Non-conform to ECMAScript 5.1\ntypeof /s/ === 'object';   // Firefox 5+  Conform to ECMAScript 5.1\n</code></pre></div>\n<h2 dir=\"auto\">What is the problem?</h2>\n<p dir=\"auto\">Information about quirks in very old browser releases seems like a net negative for readers of MDN. It will require readers to make a judgement about whether this could affect them, by testing or looking at release dates for the browsers.</p>\n<h2 dir=\"auto\">What did you expect to see?</h2>\n<p dir=\"auto\">Irrelevant information should be pruned from MDN after some time. Perhaps some special markup could be used when referring to a specific browser version, so that tools could be written to list information about browser releases too old to be relevant. Such cleanup happens to some extent in BCD, around irrelevant features removed from all browsers for more than 2 years, and also old flag data.</p>\n<h2 dir=\"auto\">Did you test this? If so, how?</h2>\n<p dir=\"auto\">Searching for \"Chrome \" + a number of any other browser followed by a number can find many examples like these.</p>",
            "url": "https://github.com/mdn/content/issues/9974",
            "title": "[ecmascript, FileAPI] Clean up irrelevant notes about old browser releases",
            "date_modified": "2021-10-21T07:48:17.000Z",
            "author": {
                "name": "foolip",
                "url": "https://github.com/foolip"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/5006",
            "content_html": "<p dir=\"auto\">MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</a></p>\n<h4 dir=\"auto\">What information was incorrect, unhelpful, or incomplete?</h4>\n<p dir=\"auto\">I didn't know where exactly to post the issue. I went for \"this\" cause the value of \"this\" is strictly related to the execution context.</p>\n<h4 dir=\"auto\">Specific section or headline?</h4>\n<h4 dir=\"auto\">What did you expect to see?</h4>\n<h4 dir=\"auto\">Did you test this? If so, how?</h4>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul dir=\"auto\">\n<li>Folder: <code class=\"notranslate\">en-us/web/javascript/reference/operators/this</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/this/index.html\">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/this/index.html</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9/hovercard\" href=\"https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9\"><tt>13360cb</tt></a></li>\n<li>Document last modified: 2021-05-05T10:31:52.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/5006",
            "title": "[ecmascript] Need a page on Execution context",
            "date_modified": "2021-05-14T18:14:38.000Z",
            "author": {
                "name": "552020",
                "url": "https://github.com/552020"
            }
        }
    ]
}