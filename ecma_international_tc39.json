{
    "version": "https://jsonfeed.org/version/1",
    "title": "Ecma International TC39-relevant MDN issues",
    "home_page_url": "https://dontcallmedom.github.io/mdn-issue-by-spec/ecma_international_tc39.rss",
    "description": "Issue filed on MDN Web Docs related to pages attached to technologies developed by Ecma International TC39",
    "author": {
        "name": "mdn-issue-by-spec",
        "url": "https://github.com/dontcallmedom/mdn-issue-by-spec"
    },
    "items": [
        {
            "id": "https://github.com/mdn/content/issues/9433",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p>\n<h4>What information was incorrect, unhelpful, or incomplete?</h4>\n<p>there is an example about lazy evaluation of functions that is really misleading to read through</p>\n<h4>Specific section or headline?</h4>\n<p>\"consider the arrow function with no arguments: f = () =&gt; expression to create the lazily-evaluated expression, and f() to evaluate.\"</p>\n<h4>What did you expect to see?</h4>\n<p>instead of writing it in such a way that implies something about arrow functions being unique in its ability to lazily evaluate expressions, it should be made clear this is a property of all functions. the way its written makes it seem like its a property of arrow functions themselves instead of any function wrapping an expression.</p>\n<h4>Did you test this? If so, how?</h4>\n<p>this is an example of someone else also being mislead by this same statement<br>\n<a rel=\"nofollow\" href=\"https://stackoverflow.com/questions/67697014/why-arrow-function-is-used-in-lazy-evaluation-in-javascript\">https://stackoverflow.com/questions/67697014/why-arrow-function-is-used-in-lazy-evaluation-in-javascript</a></p>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/global_objects/promise</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/promise/index.md\">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/promise/index.md</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/2e2631aa9d11718154ca50c2c3cc82074ab34ccd/hovercard\" href=\"https://github.com/mdn/content/commit/2e2631aa9d11718154ca50c2c3cc82074ab34ccd\"><tt>2e2631a</tt></a></li>\n<li>Document last modified: 2021-08-31T15:21:54.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/9433",
            "title": "[ecmascript] Issue with \"Promise\": (short summary here please)",
            "date_modified": "2021-10-01T23:49:35.000Z",
            "author": {
                "name": "rlimodeln",
                "url": "https://github.com/rlimodeln"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/9195",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends</a></p>\n<h4>What information was incorrect, unhelpful, or incomplete?</h4>\n<p>I can't understand what <em>the extension</em> means in this context:</p>\n<blockquote>\n<p>The <code>.prototype</code> of the extension must be an {{jsxref(\"Object\")}} or {{jsxref(\"null\")}}.</p>\n</blockquote>\n<p>My guess is that this...</p>\n<div class=\"highlight highlight-source-js position-relative\" data-snippet-clipboard-copy-content=\"function Super() {}\nSuper.prototype = 3\n\nclass Child extends Super {}\n\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-v\">Super</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-v\">Super</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">3</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">Child</span> <span class=\"pl-k\">extends</span> <span class=\"pl-v\">Super</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span></pre></div>\n<p>...isn't valid? (<code>Uncaught TypeError: Class extends value does not have valid prototype property 3</code>)</p>\n<h4>Specific section or headline?</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends#description\" rel=\"nofollow\">Description</a></p>\n<h4>What did you expect to see?</h4>\n<p>Clearer description; there's no mention of the word <em>extension</em> in the spec.</p>\n<h4>Did you test this? If so, how?</h4>\n<p>No.</p>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/classes/extends</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/classes/extends/index.md\">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/classes/extends/index.md</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/cf607d68522cd35ee7670782d3ee3a361eaef2e4/hovercard\" href=\"https://github.com/mdn/content/commit/cf607d68522cd35ee7670782d3ee3a361eaef2e4\"><tt>cf607d6</tt></a></li>\n<li>Document last modified: 2021-07-20T18:47:57.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/9195",
            "title": "[ecmascript] Issue with \"extends\": Need more clear description",
            "date_modified": "2021-09-23T08:59:43.000Z",
            "author": {
                "name": "alattalatta",
                "url": "https://github.com/alattalatta"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/8414",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift</a></p>\n<h4>What information was incorrect, unhelpful, or incomplete?</h4>\n<p><code>-9</code> base 10 should be  1000 0000 0000 0000 0000 0000 000 1001 in base 2 but in the right shift example <code>-9 &gt;&gt; 2 </code>, <code>-9</code> was  represented as 1111 1111 1111 1111 1111 1111 1111 0111. Same mistake was made for <code>-3</code> base 10.</p>\n<h4>Specific section or headline?</h4>\n<p>description</p>\n<h4>What did you expect to see?</h4>\n<ul>\n<li>Expected <code>-9</code> base 10 to be <code>1000000000000000000000000001001</code> in base 2</li>\n<li>Expected <code>-3</code> base 10 to be <code>1000000000000000000000000000011</code> in base 2</li>\n</ul>\n<h4>Did you test this? If so, how?</h4>\n<div class=\"highlight highlight-source-js position-relative\" data-snippet-clipboard-copy-content=\"console.log((-9).toString(2)) // -1001 which will be 1000000000000000000000000001001 in 32 bit\nconsole.log((-3).toString(2)) // -11 which will be 1000000000000000000000000000011 in 32 bit\n\"><pre><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">-</span><span class=\"pl-c1\">9</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// -1001 which will be 1000000000000000000000000001001 in 32 bit</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">-</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// -11 which will be 1000000000000000000000000000011 in 32 bit</span></pre></div>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/operators/right_shift</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/right_shift/index.md\">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/right_shift/index.md</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/cf607d68522cd35ee7670782d3ee3a361eaef2e4/hovercard\" href=\"https://github.com/mdn/content/commit/cf607d68522cd35ee7670782d3ee3a361eaef2e4\"><tt>cf607d6</tt></a></li>\n<li>Document last modified: 2021-07-20T18:47:57.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/8414",
            "title": "[ecmascript] Issue with \"Right shift (>>)\": Wrong binary conversion",
            "date_modified": "2021-08-28T10:28:12.000Z",
            "author": {
                "name": "olaoluwa-98",
                "url": "https://github.com/olaoluwa-98"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/7840",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class</a></p>\n<h4>What information was incorrect, unhelpful, or incomplete?</h4>\n<p>Classes in the example. First, the class <code>Polygon</code> should be called <code>Rectangle</code>, as it has only width and height. Second, more important, <code>Square extends Rectangle</code> is a <a href=\"https://en.wikipedia.org/wiki/Circle%E2%80%93ellipse_problem\" rel=\"nofollow\">classic OOP problem</a> which violates the <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\" rel=\"nofollow\">Liskov substitution principle </a>. By including it in the documentation, the incorrect usage is being spread among the developers.</p>\n<h4>Specific section or headline?</h4>\n<p>Examples, A simple class declaration.</p>\n<h4>What did you expect to see?</h4>\n<p>Other classes, which are not an anti-pattern. Example:</p>\n<div class=\"snippet-clipboard-content position-relative\" data-snippet-clipboard-copy-content=\"class Rectangle {\n\tconstructor(height, width) {\n\t\tthis.name = 'Rectangle';\n\t\tthis.height = height;\n\t\tthis.width = width;\n\t}\n}\n\nclass FilledRectangle extends Rectangle {\n\tconstructor(height, width, color) {\n\t\tsuper(height, width);\n\t\tthis.name = 'Filled rectangle';\n\t\tthis.color = color;\n\t}\n}\n\"><pre><code>class Rectangle {\n\tconstructor(height, width) {\n\t\tthis.name = 'Rectangle';\n\t\tthis.height = height;\n\t\tthis.width = width;\n\t}\n}\n\nclass FilledRectangle extends Rectangle {\n\tconstructor(height, width, color) {\n\t\tsuper(height, width);\n\t\tthis.name = 'Filled rectangle';\n\t\tthis.color = color;\n\t}\n}\n</code></pre></div>\n<p>Feel free to choose another one (maybe classic <code>Hound extends Animal</code>, which is more intuitive than math?).</p>\n<h4>Did you test this? If so, how?</h4>\n<p>Technically the existing code works, but is incorrect conceptually.</p>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/statements/class</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/class/index.md\">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/class/index.md</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/cf607d68522cd35ee7670782d3ee3a361eaef2e4/hovercard\" href=\"https://github.com/mdn/content/commit/cf607d68522cd35ee7670782d3ee3a361eaef2e4\"><tt>cf607d6</tt></a></li>\n<li>Document last modified: 2021-07-20T18:47:57.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/7840",
            "title": "[ecmascript] Issue with \"class\": examples are an anti-pattern",
            "date_modified": "2021-08-12T05:06:24.000Z",
            "author": {
                "name": "TrangOul",
                "url": "https://github.com/TrangOul"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/6545",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions</a></p>\n<h4>What information was incorrect, unhelpful, or incomplete?</h4>\n<p>Concept about the hoisting is incomplete</p>\n<h4>Specific section or headline?</h4>\n<p>Function expressions are not hoisted onto the beginning of the scope, therefore they cannot be used before they appear in the code.</p>\n<h4>What did you expect to see?</h4>\n<p>Function expressions are also hoisted onto the beginning of the scope.<br>\nI do expect these concepts.<br>\nConcept of Hoisting for functions , what happens when have same name variable and functions and others concepts like this.</p>\n<h4>Did you test this? If so, how?</h4>\n<p>On visual studio in javaScript file.</p>\n<p>console.log (xyz());   // allowed<br>\nfunction xyz(){<br>\nreturn \"allowed\";<br>\n}</p>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/functions</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/functions/index.html\">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/functions/index.html</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9/hovercard\" href=\"https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9\"><tt>13360cb</tt></a></li>\n<li>Document last modified: 2021-05-05T10:31:52.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/6545",
            "title": "[ecmascript] Issue with \"Functions\": (short summary here please)",
            "date_modified": "2021-07-03T07:09:55.000Z",
            "author": {
                "name": "anjali-shah",
                "url": "https://github.com/anjali-shah"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/6117",
            "content_html": "<h2>What page(s) did you find the problem on?</h2>\n\n<p>Lots of them!<br>\n<a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\">https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia</a><br>\n<a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a><br>\n...and many more!</p>\n<h2>Specific page section or heading?</h2>\n\n<p>getUserMedia: <em>Using the new API in older browsers</em><br>\nPromise: <em>Chained Promises</em></p>\n<h2>What is the problem?</h2>\n\n<p><code>console.log()</code> is frequently used for error handling on MDN pages, most commonly in a <code>try/catch</code> block, although <code>console.error()</code> should always be used for these cases.</p>\n<h2>What did you expect to see?</h2>\n\n<p>All errors to always be handled via <code>console.error()</code>.</p>\n<h2>Did you test this? If so, how?</h2>\n\n<p>No, I did not need to.</p>",
            "url": "https://github.com/mdn/content/issues/6117",
            "title": "[ecmascript, mediacapture-streams] Globally replace console.log() calls in all cases where console.error() should be used instead",
            "date_modified": "2021-06-18T17:07:45.000Z",
            "author": {
                "name": "JavascriptLearner815",
                "url": "https://github.com/JavascriptLearner815"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/5006",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</a></p>\n<h4>What information was incorrect, unhelpful, or incomplete?</h4>\n<p>I didn't know where exactly to post the issue. I went for \"this\" cause the value of \"this\" is strictly related to the execution context.</p>\n<h4>Specific section or headline?</h4>\n<h4>What did you expect to see?</h4>\n<h4>Did you test this? If so, how?</h4>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/operators/this</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/this/index.html\">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/this/index.html</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9/hovercard\" href=\"https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9\"><tt>13360cb</tt></a></li>\n<li>Document last modified: 2021-05-05T10:31:52.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/5006",
            "title": "[ecmascript] Issue with \"this\": lack of an article about the 'Execution context'. ",
            "date_modified": "2021-05-14T18:14:38.000Z",
            "author": {
                "name": "552020",
                "url": "https://github.com/552020"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/4968",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p>\n<h4>Specific section or headline?</h4>\n<p>The second paragraph of \"Description\" section says \"Arrays cannot use strings as element indexes (as in an associative array) but must use integers.\"</p>\n<p>The bottom of the \"Accessing array elements\" section says \"But it's also possible to quote the array indexes as well (e.g., years['2'] instead of years[2]), although it's not necessary.\"</p>\n<p>Right after that one, it says \"The 2 in years[2] is coerced into a string by the JavaScript engine through an implicit toString conversion.\"</p>\n<p>So, first it says ~\"no strings, must be ints\", then says ~\"it's okay to use a string it's just not necessary.\"  Then it says ~\"if you use ints they are coerced into strings anyway.\" Seems inconsistent/unclear, to me.</p>\n<p>I'm not confused with how to use Arrays in JavaScript, but I'm confused by this documentation's explanation.</p>\n<p>And, saying the string coercion is \"an implicit toString conversion\" as an explanation of why '2' and '02' will not be the same result is unclear. I think it's saying an explicit toString conversion is a an actual conversion similar to `Number('02') which would be the same result even with multiple zeroes were in the string's front. Perhaps \"implicit\" is the right word for the not-really-converting-to-a-number, but, it doesn't seem so to me. I think the point they were trying to make is it's not really coercing the string to a number so that's a \"gotcha\" to look out for.</p>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/global_objects/array</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/array/index.html\">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/array/index.html</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9/hovercard\" href=\"https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9\"><tt>13360cb</tt></a></li>\n<li>Document last modified: 2021-05-05T10:31:52.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/4968",
            "title": "[ecmascript] Issue with \"Array\": Documentation seems unclear and maybe contradicting itself",
            "date_modified": "2021-05-13T10:01:48.000Z",
            "author": {
                "name": "elidoran",
                "url": "https://github.com/elidoran"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/4218",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND</a></p>\n<h4>What information was incorrect, unhelpful, or incomplete?</h4>\n<p>No one information is incorrect or incomplete, but it was for me also not really helpful to understand the way &amp;&amp; returns the values of its operands.</p>\n<h4>Specific section or headline?</h4>\n<p><a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#description\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#description</a></p>\n<p>\"Description<br>\nIf expr1 can be converted to true, returns expr2; else, returns expr1.\"</p>\n<h4>What did you expect to see?</h4>\n<p>I was working on understanding the meaning of this JSX element and above all of the &amp;&amp; operator as used here:</p>\n<div class=\"snippet-clipboard-content position-relative\" data-snippet-clipboard-copy-content=\"const tasty = (\n  &lt;ul&gt;\n    &lt;li&gt;Applesauce&lt;/li&gt;\n    { !baby &amp;&amp; &lt;li&gt;Pizza&lt;/li&gt; }\n    { age &gt; 15 &amp;&amp; &lt;li&gt;Brussels Sprouts&lt;/li&gt; }\n    { age &gt; 20 &amp;&amp; &lt;li&gt;Oysters&lt;/li&gt; }\n    { age &gt; 25 &amp;&amp; &lt;li&gt;Grappa&lt;/li&gt; }\n  &lt;/ul&gt;\n);\n\"><pre><code>const tasty = (\n  &lt;ul&gt;\n    &lt;li&gt;Applesauce&lt;/li&gt;\n    { !baby &amp;&amp; &lt;li&gt;Pizza&lt;/li&gt; }\n    { age &gt; 15 &amp;&amp; &lt;li&gt;Brussels Sprouts&lt;/li&gt; }\n    { age &gt; 20 &amp;&amp; &lt;li&gt;Oysters&lt;/li&gt; }\n    { age &gt; 25 &amp;&amp; &lt;li&gt;Grappa&lt;/li&gt; }\n  &lt;/ul&gt;\n);\n</code></pre></div>\n<p>To reapeat-understand the use of &amp;&amp; in this code I went first to the page of MDN for &amp;&amp; and I didn't get it.</p>\n<p>As a second reference I use normally Flanagan \"The Definitive Guide of Javascript\" - The &amp;&amp; is explained in the pages 84-85 (4.10.1 Logical AND (&amp;&amp;)).</p>\n<p>Flanagan takes a little more space to explain it but it makes it understandable also for beginners.</p>\n<p>Sorry, that I can't help in elaborate a possible alternative explanation of the &amp;&amp;.</p>\n<h4>Did you test this? If so, how?</h4>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/operators/logical_and</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/logical_and/index.html\">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/logical_and/index.html</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/020083cf88b0d52a6f07a3d86823592f82bfcaa7/hovercard\" href=\"https://github.com/mdn/content/commit/020083cf88b0d52a6f07a3d86823592f82bfcaa7\"><tt>020083c</tt></a></li>\n<li>Document last modified: 2021-04-06T10:44:09.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/4218",
            "title": "[ecmascript] Beginner-Understanding \"Issue\" with \"Logical AND (&&)\": the short circuit evaluation and the way the operator returns the value of one of the two operands could be _maybe_ explained in a more beginner-friendly way.",
            "date_modified": "2021-04-18T12:40:39.000Z",
            "author": {
                "name": "552020",
                "url": "https://github.com/552020"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/3797",
            "content_html": "<h2>What is the new suggestion?</h2>\n<p>I propose to add a section with explanation of the term \"detaching\" regarding the ArrayBuffers.</p>\n<h2>Why is it important or useful?</h2>\n<p>It is hard to fully understand documentation without explanation of this term. For example it is used on page <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\" rel=\"nofollow\">SharedArrayBuffer</a>. I think that for a lot of people this term is just a mystery</p>\n<h2>Other supporting information</h2>\n<p><a href=\"https://github.com/domenic/proposal-arraybuffer-transfer#detaching-and-transferring\">https://github.com/domenic/proposal-arraybuffer-transfer#detaching-and-transferring</a><br>\n<a rel=\"nofollow\" href=\"https://tc39.es/ecma262/#sec-detacharraybuffer\">https://tc39.es/ecma262/#sec-detacharraybuffer</a></p>",
            "url": "https://github.com/mdn/content/issues/3797",
            "title": "[ecmascript] Expanation of concept of detaching for ArrayBuffers",
            "date_modified": "2021-04-03T13:09:30.000Z",
            "author": {
                "name": "myshov",
                "url": "https://github.com/myshov"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/3775",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator</a></p>\n<h4>What information was incorrect, unhelpful, or incomplete?</h4>\n<p>The statement that the \"[ternary] operator is frequently used as a shortcut for the if statement\"</p>\n<h4>Specific section or headline?</h4>\n<h4>What did you expect to see?</h4>\n<p>The \"[ternary] operator is frequently used as a shortcut for an if/else structure\"</p>\n<h4>Did you test this? If so, how?</h4>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/operators/conditional_operator</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/conditional_operator/index.html\">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/conditional_operator/index.html</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/3b80812a1d4f68e57f35fca763f50bf3e5dfe997/hovercard\" href=\"https://github.com/mdn/content/commit/3b80812a1d4f68e57f35fca763f50bf3e5dfe997\"><tt>3b80812</tt></a></li>\n<li>Document last modified: 2021-02-19T19:57:02.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/3775",
            "title": "[ecmascript] Issue with \"Conditional (ternary) operator\": (short summary here please)",
            "date_modified": "2021-04-02T10:45:07.000Z",
            "author": {
                "name": "DaleLacey",
                "url": "https://github.com/DaleLacey"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/2803",
            "content_html": "<h1><g-emoji class=\"g-emoji\" alias=\"ledger\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4d2.png\">📒</g-emoji> JavaScript Reference Docs Problem</h1>\n<h2>Location</h2>\n<p><em>Section of the site where the content exists</em></p>\n<p>Affected URL(s):</p>\n<ul>\n<li>[RED] <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference#control_abstraction\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference#control_abstraction</a></li>\n<li>[RED] <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#control_abstraction_objects\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#control_abstraction_objects</a></li>\n<li>[404] <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator</a></li>\n<li>[404] <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction</a></li>\n</ul>\n<h2>Description</h2>\n<p><em>Concise explanation of the problem</em></p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#control_abstraction_objects\" rel=\"nofollow\">“Control abstraction objects” section</a> of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\" rel=\"nofollow\">“Standard built-in objects” page</a> is missing pages for the <a href=\"https://tc39.es/ecma262/#sec-asyncgenerator-objects\" rel=\"nofollow\"><code>AsyncGenerator</code></a> and <a href=\"https://tc39.es/ecma262/#sec-asyncgeneratorfunction-objects\" rel=\"nofollow\"><code>AsyncGeneratorFunction</code></a> objects. Having these documents available is important because they would be needed in order for <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"805511339\" data-permission-text=\"Title is private\" data-url=\"https://github.com/mdn/content/issues/2248\" data-hovercard-type=\"issue\" data-hovercard-url=\"/mdn/content/issues/2248/hovercard\" href=\"https://github.com/mdn/content/issues/2248\">#2248</a> to move towards completion.</p>\n<hr>\n\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> I would like to work on this issue and<br>\nsubmit a pull request.</li>\n</ul>",
            "url": "https://github.com/mdn/content/issues/2803",
            "title": "[ecmascript] [JavaScript] Document “AsyncGenerator” & “AsyncGeneratorFunction”",
            "date_modified": "2021-03-02T12:34:52.000Z",
            "author": {
                "name": "DerekNonGeneric",
                "url": "https://github.com/DerekNonGeneric"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/2787",
            "content_html": "<p>It would be nice for MDN not just to link to the spec for a JS feature, but to note which version of the spec it was approved in. The reason is that sometimes tools will say that they are compatible with a spec version, but I can't tell what features that includes.</p>\n<p>Real world example:</p>\n<p>SonarQube's JS plugin says it supports ES 2019: <a href=\"https://github.com/SonarSource/SonarJS/tree/6.5.0.13383#features\">https://github.com/SonarSource/SonarJS/tree/6.5.0.13383#features</a>. But it's failing to parse optional chaining syntax. I go to MDN to see if I can figure out if optional chaining was from ES2018 or 2019 or 2020: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining</a>, but don't see anything.</p>",
            "url": "https://github.com/mdn/content/issues/2787",
            "title": "[ecmascript] Show version of spec that introduces feature",
            "date_modified": "2021-03-01T22:52:25.000Z",
            "author": {
                "name": "mehulkar",
                "url": "https://github.com/mehulkar"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/2599",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function</a></p>\n<h4>What information was incorrect, unhelpful, or incomplete?</h4>\n<p>Where did the description of constructor functions go? I'm not referring to Class constructors, I'm referring to function declarations used as constructor functions for creating objects.</p>\n<h4>Specific section or headline?</h4>\n<p>Constructor Function</p>\n<h4>What did you expect to see?</h4>\n<p>How to use a function declaration as a constructor function.</p>\n<h4>Did you test this? If so, how?</h4>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/global_objects/function</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/function/index.html\">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/function/index.html</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/3b80812a1d4f68e57f35fca763f50bf3e5dfe997/hovercard\" href=\"https://github.com/mdn/content/commit/3b80812a1d4f68e57f35fca763f50bf3e5dfe997\"><tt>3b80812</tt></a></li>\n<li>Document last modified: 2021-02-19T19:57:02.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/2599",
            "title": "[ecmascript] Issue with \"Function\": There no longer seems to be any treatment for constructor functions",
            "date_modified": "2021-02-23T03:40:51.000Z",
            "author": {
                "name": "randycasburn",
                "url": "https://github.com/randycasburn"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/2427",
            "content_html": "<p>Best described with Philip's quote from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"798245847\" data-permission-text=\"Title is private\" data-url=\"https://github.com/mdn/content/issues/1940\" data-hovercard-type=\"issue\" data-hovercard-url=\"/mdn/content/issues/1940/hovercard\" href=\"https://github.com/mdn/content/issues/1940\">#1940</a>. This issue is about making soure the descriptions are clear. It takes no position on the suggestion to put the referenced items under <code>Global_Obects/</code>.</p>\n<blockquote>\n<p>For all of the methods on WindowOrWorkerGlobalScope, I believe invoking them directly as fetch() rather than self.fetch() is idiomatic. They are: atob(), btoa(), clearInterval(), clearTimeout(), createImageBitmap(), fetch(), queueMicrotask(), setInterval(), setTimeout().</p>\n<p>For attributes, while they can be accessed directly, I think for at least these it's more idiomatic to access them via the global object, because it makes it clear they're not local variables: self.crossOriginIsolated, self.isSecureContext, self.origin.</p>\n<p>Then there's caches and indexedDB, where I suspect there's more variation in style. I'd certainly write indexedDB.open(...), but the example uses window.indexedDB.open('toDoList').</p>\n<p>On the URL, another option would be /api/Global_Objects/fetch, more analogous to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt</a></p>\n<p>I think that looking at the members of Window and WorkerGlobalScope will reveal more tricky cases. I think especially a method like window.resizeTo(), which it can be invoked as just resizeTo(), would not be great to give the same treatment as fetch().</p>\n</blockquote>\n<p>Here's the start of a list. I do not claim it is complete.</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> atob()</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> btoa()</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> clearInterval()</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> clearTimeout()</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> createImageBitmap()</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> fetch()</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> queueMicrotask()</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> setInterval()</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> setTimeout()</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> crossOriginIsolated</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> isSecureContext</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> origin</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> resizeTo</li>\n</ul>",
            "url": "https://github.com/mdn/content/issues/2427",
            "title": "[ecmascript] Make sure pages for features on WindowOrWorkerGlobalScope describe the correct means of accessing",
            "date_modified": "2021-02-17T18:23:39.000Z",
            "author": {
                "name": "jpmedley",
                "url": "https://github.com/jpmedley"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/2303",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p>\n<h4>What information was incorrect, unhelpful, or incomplete?</h4>\n<p>The code sample for Chained Promises.</p>\n<p>creates a new Promise on the fly and then uses direct call back functions for both resolve and reject handlers. That code sample was read by an new coder who completely misunderstood the intent and wrote this question on StackOverflow: <a rel=\"nofollow\" href=\"https://stackoverflow.com/questions/66164973/promise-chain-does-not-wait-until-other-promise-is-resolved#66165074\">https://stackoverflow.com/questions/66164973/promise-chain-does-not-wait-until-other-promise-is-resolved#66165074</a></p>\n<p>A synopsis of the question's code follows:</p>\n<div class=\"snippet-clipboard-content position-relative\" data-snippet-clipboard-copy-content=\"function displayAll() {\n    var myPromise = (new Promise(display1))\n    .then((new Promise(display2))\n    .then((new Promise(display3))\n    .then(display4)));\n}\n\"><pre><code>function displayAll() {\n    var myPromise = (new Promise(display1))\n    .then((new Promise(display2))\n    .then((new Promise(display3))\n    .then(display4)));\n}\n</code></pre></div>\n<p>And the demo code on MDN:</p>\n<div class=\"snippet-clipboard-content position-relative\" data-snippet-clipboard-copy-content=\"const myPromise =\n  (new Promise(myExecutorFunc))\n  .then(handleFulfilledA,handleRejectedA)\n  .then(handleFulfilledB,handleRejectedB)\n  .then(handleFulfilledC,handleRejectedC);\n\"><pre><code>const myPromise =\n  (new Promise(myExecutorFunc))\n  .then(handleFulfilledA,handleRejectedA)\n  .then(handleFulfilledB,handleRejectedB)\n  .then(handleFulfilledC,handleRejectedC);\n</code></pre></div>\n<h4>Specific section or headline?</h4>\n<p>Chained Promises</p>\n<h4>What did you expect to see?</h4>\n<p>To better demonstrate how Chained promises are used in the wild, it would be more productive/instructive to separate all the move parts. Something along the lines of the <a href=\"\">Promise Constructor</a> sample code as a starting point.</p>\n<div class=\"snippet-clipboard-content position-relative\" data-snippet-clipboard-copy-content=\"const promise1 = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    resolve('foo');\n  }, 300);\n});\n\"><pre><code>const promise1 = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    resolve('foo');\n  }, 300);\n});\n</code></pre></div>\n<p>Followed by the chaining thus:</p>\n<div class=\"snippet-clipboard-content position-relative\" data-snippet-clipboard-copy-content=\"promise1\n   .then((value) =&gt; { return value + ' and bar'; })\n   .then((value) =&gt; { return value + ' and bar again'; })\n   .then((value) =&gt; { return value + ' and again'; })\n   .then((value) =&gt; { return value + ' and again'; })\n   .then((value) =&gt; { console.log(value) });\n\"><pre><code>promise1\n   .then((value) =&gt; { return value + ' and bar'; })\n   .then((value) =&gt; { return value + ' and bar again'; })\n   .then((value) =&gt; { return value + ' and again'; })\n   .then((value) =&gt; { return value + ' and again'; })\n   .then((value) =&gt; { console.log(value) });\n</code></pre></div>\n<p>While this code is more verbose than it needs to be, it is clear a function is required as the parameter(s).</p>\n<h4>Did you test this? If so, how?</h4>\n<p>The StackOverflow question indicates this causes some confusion.</p>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/global_objects/promise</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/master/files/en-us/web/javascript/reference/global_objects/promise/index.html\">https://github.com/mdn/content/blob/master/files/en-us/web/javascript/reference/global_objects/promise/index.html</a></li>\n<li>Last commit: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/mdn/content/commit/c45665984d990171c7a1b269f0074c34ddfb3d02/hovercard\" href=\"https://github.com/mdn/content/commit/c45665984d990171c7a1b269f0074c34ddfb3d02\"><tt>c456659</tt></a></li>\n<li>Document last modified: 2021-01-22T08:11:48.000Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/2303",
            "title": "[ecmascript] Issue with \"Promise\": Code used to demonstrate Chaining is misleading for new coders",
            "date_modified": "2021-02-12T01:14:58.000Z",
            "author": {
                "name": "randycasburn",
                "url": "https://github.com/randycasburn"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/887",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function</a></p>\n<h4>What information was incorrect, unhelpful, or incomplete?</h4>\n<p>Has a box that says:</p>\n<blockquote>\n<p>The await keyword is only valid inside async functions. If you use it outside of an async function's body, you will get a SyntaxError.</p>\n</blockquote>\n<p>It's not generally true that \"outside of an async function's body, you will get a SyntaxError\". Generally the word <code>async</code> will be parsed as an identifier.  (Maybe <a href=\"https://tc39.es/ecma262/#_ref_15481\" rel=\"nofollow\">modules are an exception</a>?)</p>\n<h4>Specific section or headline?</h4>\n<p>In the <strong>Description</strong></p>\n<h4>Did you test this? If so, how?</h4>\n<p>This is entirely legal syntax:</p>\n<div class=\"snippet-clipboard-content position-relative\" data-snippet-clipboard-copy-content=\"function await() { return 42 }\n\nfunction g() { return await `abc` }\n\nconsole.log(g())\n\"><pre><code>function await() { return 42 }\n\nfunction g() { return await `abc` }\n\nconsole.log(g())\n</code></pre></div>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/statements/async_function</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/master/files/en-us/web/javascript/reference/statements/async_function/index.html\">https://github.com/mdn/content/blob/master/files/en-us/web/javascript/reference/statements/async_function/index.html</a></li>\n<li>Report started: 2021-01-03T20:27:00.236Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/887",
            "title": "[ecmascript] \"await\" is not always a keyword",
            "date_modified": "2021-01-03T20:50:54.000Z",
            "author": {
                "name": "spazmodius",
                "url": "https://github.com/spazmodius"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/309",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static</a></p>\n<h4>What information was incorrect, unhelpful, or incomplete?</h4>\n<p>Static class fields should not yet be documented without a disclaimer.</p>\n<h4>Specific section or headline?</h4>\n<p><a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static#Using_static_members_in_classes\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static#Using_static_members_in_classes</a></p>\n<h4>What did you expect to see?</h4>\n<p>The same disclaimer that is in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields\" rel=\"nofollow\">public class fields</a> documentation:</p>\n<blockquote>\n<p>This page describes experimental features.</p>\n<p>Both Public and private field declarations are an experimental feature (stage 3) proposed at TC39, the JavaScript standards committee.</p>\n<p>Support in browsers is limited, but the feature can be used through a build step with systems like Babel. See the compat information below.</p>\n</blockquote>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/classes/static</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/master/files/en-us/web/javascript/reference/classes/static/index.html\">https://github.com/mdn/content/blob/master/files/en-us/web/javascript/reference/classes/static/index.html</a></li>\n<li>Report started: 2020-12-16T14:16:55.769Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/309",
            "title": "[ecmascript] Issue with \"static\": …",
            "date_modified": "2020-12-16T16:59:53.000Z",
            "author": {
                "name": "bergus",
                "url": "https://github.com/bergus"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/208",
            "content_html": "<p>MDN URL: <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super</a></p>\n<h4>What information was incorrect, unhelpful, or incomplete?</h4>\n<p>Incomplete</p>\n<h4>Specific section or headline?</h4>\n<p><code>super</code> does not work as expected with <code>extends</code> when designing \"mixin\" composition. It does not follow traditional dynamic language semantics for <code>super</code>; especially in respect to Smalltalk definition of <code>super</code>.</p>\n<h4>What did you expect to see?</h4>\n<p>See comments IN:<br>\n<a rel=\"nofollow\" href=\"https://stackoverflow.com/questions/64395149/how-is-the-value-of-super-determined-compared-to-this/65298925#65298925\">https://stackoverflow.com/questions/64395149/how-is-the-value-of-super-determined-compared-to-this/65298925#65298925</a></p>\n<h4>Did you test this? If so, how?</h4>\n<p>See comments and details in:<br>\n<a rel=\"nofollow\" href=\"https://stackoverflow.com/questions/64395149/how-is-the-value-of-super-determined-compared-to-this/65298925#65298925\">https://stackoverflow.com/questions/64395149/how-is-the-value-of-super-determined-compared-to-this/65298925#65298925</a></p>\n\n<details>\n<summary>MDN Content page report details</summary>\n<ul>\n<li>Folder: <code>en-us/web/javascript/reference/operators/super</code></li>\n<li>MDN URL: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super</a></li>\n<li>GitHub URL: <a href=\"https://github.com/mdn/content/blob/master/files/en-us/web/javascript/reference/operators/super/index.html\">https://github.com/mdn/content/blob/master/files/en-us/web/javascript/reference/operators/super/index.html</a></li>\n<li>Report started: 2020-12-15T02:18:19.476Z</li>\n</ul>\n</details>",
            "url": "https://github.com/mdn/content/issues/208",
            "title": "[ecmascript] Issue with \"super\": …",
            "date_modified": "2020-12-15T02:21:12.000Z",
            "author": {
                "name": "smallscript",
                "url": "https://github.com/smallscript"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/1623",
            "content_html": "<h1>Request type</h1>\n\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Please close this issue, I accidentally submitted it without adding any details</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> New documentation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Correction or update</li>\n</ul>\n<h1>Details</h1>\n<ul>\n<li>Currently the content on bigints is here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt</a>\n<ul>\n<li>The intro gives a slightly wrong impression: “<code>BigInt</code> is a built-in object that provides a way to represent whole numbers [...]”. I’d emphasize that this object <em>complements</em> primitive bigint values and is the source of their methods.</li>\n<li>Is there a better location for this content – a page that focuses on bigints as primitive values?</li>\n</ul>\n</li>\n<li>Page <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/BigInt\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Glossary/BigInt</a>\n<ul>\n<li>“The JavaScript data structure: <code>BigInt</code>”: <code>BigInt</code> is not a data structure!</li>\n</ul>\n</li>\n</ul>",
            "url": "https://github.com/mdn/content/issues/1623",
            "title": "[ecmascript] Suggestions for the MDN content on bigints",
            "date_modified": "2020-07-05T11:05:03.000Z",
            "author": {
                "name": "rauschma",
                "url": "https://github.com/rauschma"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/1796",
            "content_html": "<h1>Request type</h1>\n\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Please close this issue, I accidentally submitted it without adding any details</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> New documentation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Correction or update</li>\n</ul>\n<h1>Details</h1>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting\" rel=\"nofollow\">var hoisting paragraph</a> might not be clear enough, may even be confusing.<br>\nAccording to the paragraph:<br>\n<em>\"Because variable declarations <strong>(and declarations in general)</strong> are processed before any code is executed, declaring a variable anywhere in the code is equivalent to declaring it at the top. <strong>This also means that a variable can appear to be used before it's declared. This behavior is called \"hoisting\", as it appears that the variable declaration is moved to the top of the function or global code.</strong>\"</em></p>\n<p>A reader may think that, since <strong>both var and let</strong> varaibles' declarations are processed before any code is executed, both of them will be <strong>hoisted</strong>. We know this is not true.</p>\n<p>One more misleading statement from this paragraph:<br>\n<em>\"It's important to point out that the <strong>hoisting will affect the variable declaration, but not its value's initialization</strong>. The value will be indeed assigned when the assignment statement is reached:\"</em></p>\n<p>Again, in reality, it <strong>does</strong> affect variable (implicit) initialization. Variables defined with <strong>var will be initialized</strong> with \"undefined\" value and we will be able to use them before <strong>explicit initialization (definition)</strong>.</p>\n<p>Let variables <strong>will also be declared at the start of their scope (block in their case)</strong> but will NOT be initialized (will be in temporal dead zone until their definition). Therefore, since only <strong>declaration</strong>, but not <strong>implicit declaration</strong> happens, we consider <strong>let variables not to be hoisted</strong>.</p>\n<p>Please, see <a href=\"https://dmitripavlutin.com/variables-lifecycle-and-why-let-is-not-hoisted/\" rel=\"nofollow\">this article</a> for more information (credits to Dmitri Pavlutin).</p>",
            "url": "https://github.com/mdn/content/issues/1796",
            "title": "[ecmascript] /en-US/docs/Web/JavaScript/Reference/Statements/var",
            "date_modified": "2020-04-01T11:43:25.000Z",
            "author": {
                "name": "DawidKopys",
                "url": "https://github.com/DawidKopys"
            }
        },
        {
            "id": "https://github.com/mdn/content/issues/2248",
            "content_html": "<p>Cross-filed from <a rel=\"nofollow\" href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1483152\">https://bugzilla.mozilla.org/show_bug.cgi?id=1483152</a></p>\n<p>Documentation for <a rel=\"nofollow\" href=\"https://tc39.github.io/proposal-async-iteration/\">https://tc39.github.io/proposal-async-iteration/</a><br>\n(this shipped in Firefox 57, see bug 1352312)</p>\n<h2>Iteration protocol reference page:</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols</a> needs to talk about the async iteration protocol.</li>\n</ul>\n<h2>Symbol.asyncIterator</h2>\n<ul>\n<li>Docs could probably be derived from Symbol.iterator <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator</a></li>\n<li>It's already listed on the Symbol page: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Well-known_symbols\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Well-known_symbols</a></li>\n<li>New page to be created here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator</a></li>\n<li>Compat data update here: <a href=\"https://github.com/mdn/browser-compat-data/blob/master/javascript/builtins/Symbol.json#L58\">https://github.com/mdn/browser-compat-data/blob/master/javascript/builtins/Symbol.json#L58</a></li>\n<li>New interactive example here: <a href=\"https://github.com/mdn/interactive-examples/tree/master/live-examples/js-examples/symbol\">https://github.com/mdn/interactive-examples/tree/master/live-examples/js-examples/symbol</a></li>\n</ul>\n<h2>for-await-of</h2>\n<ul>\n<li>Needs to be listed here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#Iterations\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#Iterations</a></li>\n<li>New reference page here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await-of\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await-of</a></li>\n<li>New compat data entry here: <a href=\"https://github.com/mdn/browser-compat-data/blob/master/javascript/statements.json\">https://github.com/mdn/browser-compat-data/blob/master/javascript/statements.json</a></li>\n<li>New interactive example here: <a href=\"https://github.com/mdn/interactive-examples/tree/master/live-examples/js-examples/statement\">https://github.com/mdn/interactive-examples/tree/master/live-examples/js-examples/statement</a></li>\n</ul>\n<h2>Async generators</h2>\n<p>We have <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function</a>*, maybe it would be worth doing an extra reference page about async function* ? Then you would create e.g. <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function</a>* maybe. Also add compat data and interactive example again, like for the other two above.</p>\n<h2>APIs that use async iterators / generators</h2>\n<p>I don't know all the APIs that use async iteration, but it seems like Streams are async iterables, so it might be interesting to look into our streams docs and update them if necessary <a rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\">https://developer.mozilla.org/en-US/docs/Web/API/Streams_API</a></p>\n<h2>Guide page updates</h2>\n<ul>\n<li>We have <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators</a></li>\n<li>Unfortunately we have no dedicated guide page yet on async JS programming. We want to create that at some point, though. See <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1305261\" rel=\"nofollow\">https://bugzilla.mozilla.org/show_bug.cgi?id=1305261</a></li>\n<li>More brainstorming on that here: <a href=\"https://docs.google.com/document/d/1ko8Xt5JaFVuXjEOHSyhw8MaxKPTbKiX6Qc7EXtczKUA/edit?ts=5b55b98b#heading=h.5tv0p4d6vqmu\" rel=\"nofollow\">https://docs.google.com/document/d/1ko8Xt5JaFVuXjEOHSyhw8MaxKPTbKiX6Qc7EXtczKUA/edit?ts=5b55b98b#heading=h.5tv0p4d6vqmu</a></li>\n</ul>\n<h2>Misc</h2>\n<ul>\n<li>Joe Medley contributed this: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"341102008\" data-permission-text=\"Title is private\" data-url=\"https://github.com/mdn/interactive-examples/issues/1036\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/mdn/interactive-examples/pull/1036/hovercard\" href=\"https://github.com/mdn/interactive-examples/pull/1036\">mdn/interactive-examples#1036</a>, check if it is integrated nicely.</li>\n</ul>",
            "url": "https://github.com/mdn/content/issues/2248",
            "title": "[ecmascript] Document async iterators and generators",
            "date_modified": "2019-02-08T17:10:50.000Z",
            "author": {
                "name": "chrisdavidmills",
                "url": "https://github.com/chrisdavidmills"
            }
        }
    ]
}