<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>WHATWG Streams Workstream-relevant MDN issues</title>
        <link>https://dontcallmedom.github.io/mdn-issue-by-spec/whatwg_streams_workstream.rss</link>
        <description>Issue filed on MDN Web Docs related to pages attached to technologies developed by WHATWG Streams Workstream</description>
        <lastBuildDate>Mon, 20 Mar 2023 15:52:36 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[[streams] interval variable is not in scope of cancel method]]></title>
            <link>https://github.com/mdn/content/issues/25480</link>
            <guid>https://github.com/mdn/content/issues/25480</guid>
            <pubDate>Mon, 20 Mar 2023 15:52:36 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Examples</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">The scope of the variable 'interval' is unclear. We cannot say whether the cancel function actually has access to it!<br>
In your running example, the cancel function cannot.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">let interval;<br>
const stream = new ReadableStream({<br>
start(controller) {<br>
...</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto">.</p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto">.</p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/api/readablestream/readablestream</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/api/readablestream/readablestream/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/api/readablestream/readablestream/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/3b22c657f659c249cbe6e4fc6794370a5cb67a72/hovercard" href="https://github.com/mdn/content/commit/3b22c657f659c249cbe6e4fc6794370a5cb67a72"><tt>3b22c65</tt></a></li>
<li>Document last modified: 2023-03-01T11:11:40.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[streams] ReadableStream example mixes creation and consumption]]></title>
            <link>https://github.com/mdn/content/issues/23299</link>
            <guid>https://github.com/mdn/content/issues/23299</guid>
            <pubDate>Sun, 01 Jan 2023 13:20:04 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">The example</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">The example is this one:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fetch('https://www.example.org')
  .then((response) =&gt; response.body)
  .then((rb) =&gt; {
    const reader = rb.getReader();

    return new ReadableStream({
      start(controller) {
        // The following function handles each data chunk
        function push() {
          // &quot;done&quot; is a Boolean and value a &quot;Uint8Array&quot;
          reader.read().then(({ done, value }) =&gt; {
            // If there is no more data to read
            if (done) {
              console.log('done', done);
              controller.close();
              return;
            }
            // Get the data and send it to the browser via the controller
            controller.enqueue(value);
            // Check chunks by logging to the console
            console.log(done, value);
            push();
          });
        }

        push();
      },
    });
  })
  .then((stream) =&gt;
    // Respond with our stream
    new Response(stream, { headers: { 'Content-Type': 'text/html' } }).text()
  )
  .then((result) =&gt; {
    // Do things with result
    console.log(result);
  });
"><pre class="notranslate"><span class="pl-en">fetch</span><span class="pl-kos">(</span><span class="pl-s">'https://www.example.org'</span><span class="pl-kos">)</span>
  <span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-s1">response</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-s1">response</span><span class="pl-kos">.</span><span class="pl-c1">body</span><span class="pl-kos">)</span>
  <span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-s1">rb</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-kos">{</span>
    <span class="pl-k">const</span> <span class="pl-s1">reader</span> <span class="pl-c1">=</span> <span class="pl-s1">rb</span><span class="pl-kos">.</span><span class="pl-en">getReader</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

    <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-v">ReadableStream</span><span class="pl-kos">(</span><span class="pl-kos">{</span>
      <span class="pl-en">start</span><span class="pl-kos">(</span><span class="pl-s1">controller</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-c">// The following function handles each data chunk</span>
        <span class="pl-k">function</span> <span class="pl-en">push</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
          <span class="pl-c">// "done" is a Boolean and value a "Uint8Array"</span>
          <span class="pl-s1">reader</span><span class="pl-kos">.</span><span class="pl-en">read</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-kos">{</span> done<span class="pl-kos">,</span> value <span class="pl-kos">}</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-kos">{</span>
            <span class="pl-c">// If there is no more data to read</span>
            <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">done</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
              <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">'done'</span><span class="pl-kos">,</span> <span class="pl-s1">done</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
              <span class="pl-s1">controller</span><span class="pl-kos">.</span><span class="pl-en">close</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
              <span class="pl-k">return</span><span class="pl-kos">;</span>
            <span class="pl-kos">}</span>
            <span class="pl-c">// Get the data and send it to the browser via the controller</span>
            <span class="pl-s1">controller</span><span class="pl-kos">.</span><span class="pl-en">enqueue</span><span class="pl-kos">(</span><span class="pl-s1">value</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
            <span class="pl-c">// Check chunks by logging to the console</span>
            <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">done</span><span class="pl-kos">,</span> <span class="pl-s1">value</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
            <span class="pl-en">push</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
          <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>

        <span class="pl-en">push</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
      <span class="pl-kos">}</span><span class="pl-kos">,</span>
    <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">)</span>
  <span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-s1">stream</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span>
    <span class="pl-c">// Respond with our stream</span>
    <span class="pl-k">new</span> <span class="pl-v">Response</span><span class="pl-kos">(</span><span class="pl-s1">stream</span><span class="pl-kos">,</span> <span class="pl-kos">{</span> <span class="pl-c1">headers</span>: <span class="pl-kos">{</span> <span class="pl-s">'Content-Type'</span>: <span class="pl-s">'text/html'</span> <span class="pl-kos">}</span> <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">text</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
  <span class="pl-kos">)</span>
  <span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-s1">result</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-kos">{</span>
    <span class="pl-c">// Do things with result</span>
    <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">result</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">I found it confusing because it is mixing both the <strong>how to consume</strong> and <strong>how to produce</strong> a Stream if I am correct.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">As a person that is learning I don't really get from here a recipe for using it. Wouldn't it be better to split this into two pieces, one where it is shown how to read, and other where - maybe a server - creates a Stream for a Response ?</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto"><em>No response</em></p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto">I may just be misunderstanding the example.</p>
<p dir="auto">Thanks for the patience !</p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/api/readablestream</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/api/readablestream/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/api/readablestream/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/06105598d11001e9f12d80ad05087f1df3c0634b/hovercard" href="https://github.com/mdn/content/commit/06105598d11001e9f12d80ad05087f1df3c0634b"><tt>0610559</tt></a></li>
<li>Document last modified: 2022-10-10T09:00:13.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[streams] Issue with "WritableStreamDefaultWriter": (Incorrect/Problematic Example)]]></title>
            <link>https://github.com/mdn/content/issues/11494</link>
            <guid>https://github.com/mdn/content/issues/11494</guid>
            <pubDate>Sun, 26 Dec 2021 17:35:24 GMT</pubDate>
            <content:encoded><![CDATA[<p dir="auto">MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter</a></p>
<h4 dir="auto">What information was incorrect, unhelpful, or incomplete?</h4>
<p dir="auto">Im am referring to this example currently on<br>
<a href="https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter</a>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="const list = document.querySelector('ul');

function sendMessage(message, writableStream) {
	// defaultWriter is of type WritableStreamDefaultWriter
	const defaultWriter = writableStream.getWriter();
	const encoder = new TextEncoder();
	const encoded = encoder.encode(message, { stream: true });
	encoded.forEach((chunk) =&gt; {
		defaultWriter.ready
			.then(() =&gt; {
				return defaultWriter.write(chunk);
			})
			.then(() =&gt; {
				console.log(&quot;Chunk written to sink.&quot;);
			})
			.catch((err) =&gt; {
				console.log(&quot;Chunk error:&quot;, err);
			});
	});
	// Call ready again to ensure that all chunks are written
	//   before closing the writer.
	defaultWriter.ready
		.then(() =&gt; {
			defaultWriter.close();
		})
		.then(() =&gt; {
			console.log(&quot;All chunks written&quot;);
		})
		.catch((err) =&gt; {
			console.log(&quot;Stream error:&quot;, err);
		});
}

const decoder = new TextDecoder(&quot;utf-8&quot;);
const queuingStrategy = new CountQueuingStrategy({ highWaterMark: 1 });
let result = &quot;&quot;;
const writableStream = new WritableStream({
	// Implement the sink
	write(chunk) {
		return new Promise((resolve, reject) =&gt; {
			var buffer = new ArrayBuffer(2);
			var view = new Uint16Array(buffer);
			view[0] = chunk;
			var decoded = decoder.decode(view, { stream: true });
			var listItem = document.createElement('li');
			listItem.textContent = &quot;Chunk decoded: &quot; + decoded;
			list.appendChild(listItem);
			result += decoded;
			resolve();
		});
	},
	close() {
		var listItem = document.createElement('li');
		listItem.textContent = &quot;[MESSAGE RECEIVED] &quot; + result;
		list.appendChild(listItem);
	},
	abort(err) {
		console.log(&quot;Sink error:&quot;, err);
	}
}, queuingStrategy);

sendMessage(&quot;Hello, world.&quot;, writableStream);
"><pre lang="js" class="notranslate"><code class="notranslate">const list = document.querySelector('ul');

function sendMessage(message, writableStream) {
	// defaultWriter is of type WritableStreamDefaultWriter
	const defaultWriter = writableStream.getWriter();
	const encoder = new TextEncoder();
	const encoded = encoder.encode(message, { stream: true });
	encoded.forEach((chunk) =&gt; {
		defaultWriter.ready
			.then(() =&gt; {
				return defaultWriter.write(chunk);
			})
			.then(() =&gt; {
				console.log("Chunk written to sink.");
			})
			.catch((err) =&gt; {
				console.log("Chunk error:", err);
			});
	});
	// Call ready again to ensure that all chunks are written
	//   before closing the writer.
	defaultWriter.ready
		.then(() =&gt; {
			defaultWriter.close();
		})
		.then(() =&gt; {
			console.log("All chunks written");
		})
		.catch((err) =&gt; {
			console.log("Stream error:", err);
		});
}

const decoder = new TextDecoder("utf-8");
const queuingStrategy = new CountQueuingStrategy({ highWaterMark: 1 });
let result = "";
const writableStream = new WritableStream({
	// Implement the sink
	write(chunk) {
		return new Promise((resolve, reject) =&gt; {
			var buffer = new ArrayBuffer(2);
			var view = new Uint16Array(buffer);
			view[0] = chunk;
			var decoded = decoder.decode(view, { stream: true });
			var listItem = document.createElement('li');
			listItem.textContent = "Chunk decoded: " + decoded;
			list.appendChild(listItem);
			result += decoded;
			resolve();
		});
	},
	close() {
		var listItem = document.createElement('li');
		listItem.textContent = "[MESSAGE RECEIVED] " + result;
		list.appendChild(listItem);
	},
	abort(err) {
		console.log("Sink error:", err);
	}
}, queuingStrategy);

sendMessage("Hello, world.", writableStream);

</code></pre></div>
<p dir="auto">Preliminary note: Note that <code class="notranslate">then</code> is called multiple<br>
times <em>on the same</em> <code class="notranslate">Promise</code> (branching, not chaining):<br>
<code class="notranslate">defaultWriter.ready.then</code> is called multiple times.</p>
<p dir="auto">When a write <code class="notranslate">Promise</code> rejects, we see the problems with<br>
the code. Assume the first chunk's write promise rejects:</p>
<ul dir="auto">
<li>
<p dir="auto">The error handler printing <code class="notranslate">"Chunk error:", err</code> is called<br>
13 times (not just once for the failing chunk): all<br>
chunks (their "tasks") are immediately enqueued by<br>
<code class="notranslate">defaultWriter.ready</code> (not in the writer/stream's queue).</p>
</li>
<li>
<p dir="auto">The error handler registered for the closing task<br>
(printing <code class="notranslate">"Stream error:", err</code>) is not called at all.<br>
The error resulting from calling <code class="notranslate">defaultWriter.close()</code><br>
is unhandled. Instead of:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="defaultWriter.close();"><pre class="notranslate"><code class="notranslate">defaultWriter.close();
</code></pre></div>
<p dir="auto">it should be</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="return defaultWriter.close();"><pre class="notranslate"><code class="notranslate">return defaultWriter.close();
</code></pre></div>
</li>
</ul>
<h4 dir="auto">Specific section or headline?</h4>
<p dir="auto">Section "Examples": <a href="https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter#examples" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter#examples</a></p>
<p dir="auto">Note that the example might also be here: <a href="https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/close" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/close</a></p>
<h4 dir="auto">What did you expect to see?</h4>
<p dir="auto">I would love to see an example that:</p>
<ul dir="auto">
<li>handles errors / <code class="notranslate">Promise</code> rejections decently (handling a single error once, no unhandled errors, handling errors from <code class="notranslate">close</code>, no writing attempts after error)</li>
<li>does not use "branching" <code class="notranslate">then</code> when "chaining" <code class="notranslate">then</code> or <code class="notranslate">async</code>/<code class="notranslate">await</code> could easily be used (this example shows the confusion that can arise)</li>
</ul>
<h4 dir="auto">Did you test this? If so, how?</h4>
<p dir="auto">Yes, I tested this. To reproduce:</p>
<ul dir="auto">
<li>Download the code from "<a href="https://mdn.github.io/dom-examples/streams/simple-writer/" rel="nofollow">https://mdn.github.io/dom-examples/streams/simple-writer/</a>"</li>
<li><code class="notranslate">reject</code> some <code class="notranslate">Promise</code> (the one already explicitly in the code or add one to <code class="notranslate">reject</code>).</li>
<li>Run the code in a browser already supporting <code class="notranslate">WritableStream</code>s.</li>
</ul>

<details>
<summary>MDN Content page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/api/writablestreamdefaultwriter</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/api/writablestreamdefaultwriter/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/api/writablestreamdefaultwriter/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/2279e5ae6c229c707a014a22aa1ec4635a0f981f/hovercard" href="https://github.com/mdn/content/commit/2279e5ae6c229c707a014a22aa1ec4635a0f981f"><tt>2279e5a</tt></a></li>
<li>Document last modified: 2021-09-14T18:08:09.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
    </channel>
</rss>