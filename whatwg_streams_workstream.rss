<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>WHATWG Streams Workstream-relevant MDN issues</title>
        <link>https://dontcallmedom.github.io/mdn-issue-by-spec/whatwg_streams_workstream.rss</link>
        <description>Issue filed on MDN Web Docs related to pages attached to technologies developed by WHATWG Streams Workstream</description>
        <lastBuildDate>Mon, 20 Mar 2023 15:52:36 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[[streams] interval variable is not in scope of cancel method]]></title>
            <link>https://github.com/mdn/content/issues/25480</link>
            <guid>https://github.com/mdn/content/issues/25480</guid>
            <pubDate>Mon, 20 Mar 2023 15:52:36 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Examples</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">The scope of the variable 'interval' is unclear. We cannot say whether the cancel function actually has access to it!<br>
In your running example, the cancel function cannot.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">let interval;<br>
const stream = new ReadableStream({<br>
start(controller) {<br>
...</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto">.</p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto">.</p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/api/readablestream/readablestream</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/api/readablestream/readablestream/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/api/readablestream/readablestream/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/3b22c657f659c249cbe6e4fc6794370a5cb67a72/hovercard" href="https://github.com/mdn/content/commit/3b22c657f659c249cbe6e4fc6794370a5cb67a72"><tt>3b22c65</tt></a></li>
<li>Document last modified: 2023-03-01T11:11:40.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[streams] ReadableStream example mixes creation and consumption]]></title>
            <link>https://github.com/mdn/content/issues/23299</link>
            <guid>https://github.com/mdn/content/issues/23299</guid>
            <pubDate>Sun, 01 Jan 2023 13:20:04 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">The example</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">The example is this one:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fetch('https://www.example.org')
  .then((response) =&gt; response.body)
  .then((rb) =&gt; {
    const reader = rb.getReader();

    return new ReadableStream({
      start(controller) {
        // The following function handles each data chunk
        function push() {
          // &quot;done&quot; is a Boolean and value a &quot;Uint8Array&quot;
          reader.read().then(({ done, value }) =&gt; {
            // If there is no more data to read
            if (done) {
              console.log('done', done);
              controller.close();
              return;
            }
            // Get the data and send it to the browser via the controller
            controller.enqueue(value);
            // Check chunks by logging to the console
            console.log(done, value);
            push();
          });
        }

        push();
      },
    });
  })
  .then((stream) =&gt;
    // Respond with our stream
    new Response(stream, { headers: { 'Content-Type': 'text/html' } }).text()
  )
  .then((result) =&gt; {
    // Do things with result
    console.log(result);
  });
"><pre class="notranslate"><span class="pl-en">fetch</span><span class="pl-kos">(</span><span class="pl-s">'https://www.example.org'</span><span class="pl-kos">)</span>
  <span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-s1">response</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-s1">response</span><span class="pl-kos">.</span><span class="pl-c1">body</span><span class="pl-kos">)</span>
  <span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-s1">rb</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-kos">{</span>
    <span class="pl-k">const</span> <span class="pl-s1">reader</span> <span class="pl-c1">=</span> <span class="pl-s1">rb</span><span class="pl-kos">.</span><span class="pl-en">getReader</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

    <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-v">ReadableStream</span><span class="pl-kos">(</span><span class="pl-kos">{</span>
      <span class="pl-en">start</span><span class="pl-kos">(</span><span class="pl-s1">controller</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-c">// The following function handles each data chunk</span>
        <span class="pl-k">function</span> <span class="pl-en">push</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
          <span class="pl-c">// "done" is a Boolean and value a "Uint8Array"</span>
          <span class="pl-s1">reader</span><span class="pl-kos">.</span><span class="pl-en">read</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-kos">{</span> done<span class="pl-kos">,</span> value <span class="pl-kos">}</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-kos">{</span>
            <span class="pl-c">// If there is no more data to read</span>
            <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">done</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
              <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">'done'</span><span class="pl-kos">,</span> <span class="pl-s1">done</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
              <span class="pl-s1">controller</span><span class="pl-kos">.</span><span class="pl-en">close</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
              <span class="pl-k">return</span><span class="pl-kos">;</span>
            <span class="pl-kos">}</span>
            <span class="pl-c">// Get the data and send it to the browser via the controller</span>
            <span class="pl-s1">controller</span><span class="pl-kos">.</span><span class="pl-en">enqueue</span><span class="pl-kos">(</span><span class="pl-s1">value</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
            <span class="pl-c">// Check chunks by logging to the console</span>
            <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">done</span><span class="pl-kos">,</span> <span class="pl-s1">value</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
            <span class="pl-en">push</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
          <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>

        <span class="pl-en">push</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
      <span class="pl-kos">}</span><span class="pl-kos">,</span>
    <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">)</span>
  <span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-s1">stream</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span>
    <span class="pl-c">// Respond with our stream</span>
    <span class="pl-k">new</span> <span class="pl-v">Response</span><span class="pl-kos">(</span><span class="pl-s1">stream</span><span class="pl-kos">,</span> <span class="pl-kos">{</span> <span class="pl-c1">headers</span>: <span class="pl-kos">{</span> <span class="pl-s">'Content-Type'</span>: <span class="pl-s">'text/html'</span> <span class="pl-kos">}</span> <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">text</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
  <span class="pl-kos">)</span>
  <span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-s1">result</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-kos">{</span>
    <span class="pl-c">// Do things with result</span>
    <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">result</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">I found it confusing because it is mixing both the <strong>how to consume</strong> and <strong>how to produce</strong> a Stream if I am correct.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">As a person that is learning I don't really get from here a recipe for using it. Wouldn't it be better to split this into two pieces, one where it is shown how to read, and other where - maybe a server - creates a Stream for a Response ?</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto"><em>No response</em></p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto">I may just be misunderstanding the example.</p>
<p dir="auto">Thanks for the patience !</p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/api/readablestream</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/api/readablestream/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/api/readablestream/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/06105598d11001e9f12d80ad05087f1df3c0634b/hovercard" href="https://github.com/mdn/content/commit/06105598d11001e9f12d80ad05087f1df3c0634b"><tt>0610559</tt></a></li>
<li>Document last modified: 2022-10-10T09:00:13.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
    </channel>
</rss>