<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Ecma International TC39-relevant MDN issues</title>
        <link>https://dontcallmedom.github.io/mdn-issue-by-spec/ecma_international_tc39.rss</link>
        <description>Issue filed on MDN Web Docs related to pages attached to technologies developed by Ecma International TC39</description>
        <lastBuildDate>Thu, 15 Jun 2023 17:50:26 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[[ecmascript] Slightly misleading wording around Atomics.wait/Async]]></title>
            <link>https://github.com/mdn/content/issues/27356</link>
            <guid>https://github.com/mdn/content/issues/27356</guid>
            <pubDate>Thu, 15 Jun 2023 17:50:26 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">The Note</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto"><strong>Note:</strong> This operation only works with a shared <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array" rel="nofollow">Int32Array</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array" rel="nofollow">BigInt64Array</a> and may not be allowed on the main thread.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">It's a bit of a brainstorming session or just plain wrong wording to me ... to use a <em>SharedArrayBuffer</em> I don't strictly need to "<em>share</em>" an <em>Int32Array</em> or even a <em>BigInt64Array</em>, all I need to do is to use these <strong>views</strong> to deal with the received <em>SharedArrayBuffer</em>.</p>
<p dir="auto">In short, I've found a bit misleading the concept of "<em>a shared Int32Array</em>" as that can't be used as transferable + it really doesn't need to be posted at all to coordinate <em>Atomics</em> operations, as 2 <code class="notranslate">new Int32Array(sab)</code> in both main thread and the worker would do just fine, and the memory consumption, after a structured clone algorithm, won't grant or guarantee any memory saving in passing along these references, instead of the raw <em>SharedArrayBuffer</em>, also used in most blog posts examples.</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto">My recent blog post around <em>SharedArrayBuffer and Atomics</em> show, and live test, that no view is strictly needed to operate, and a reference to such buffer would be enough: <a href="https://webreflection.medium.com/about-sharedarraybuffer-atomics-87f97ddfc098" rel="nofollow">https://webreflection.medium.com/about-sharedarraybuffer-atomics-87f97ddfc098</a></p>
<p dir="auto">Do I need to change those examples because my understanding and working code is somehow <em>wrong</em> and those buffers need to be posted already as <code class="notranslate">Int32Array</code>?</p>
<p dir="auto">Is this rather a hint that there's no need to create multiple <code class="notranslate">Int32Array</code> on both sides?</p>
<p dir="auto">I am fully open to learn more here, and eventually fix that blog post too, thanks!</p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto"><em>No response</em></p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/global_objects/atomics/wait</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/atomics/wait/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/atomics/wait/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/a92a2bb31cf5d79808878701f0344a4eabf12963/hovercard" href="https://github.com/mdn/content/commit/a92a2bb31cf5d79808878701f0344a4eabf12963"><tt>a92a2bb</tt></a></li>
<li>Document last modified: 2023-04-06T04:58:26.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Throwing a string or number (instead of an Error) is generally problematic]]></title>
            <link>https://github.com/mdn/content/issues/27151</link>
            <guid>https://github.com/mdn/content/issues/27151</guid>
            <pubDate>Mon, 05 Jun 2023 20:09:49 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Description</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">throw "Error2"; // generates an exception with a string value<br>
throw 42; // generates an exception with the value 42<br>
throw true; // generates an exception with the value true<br>
throw new Error("Required"); // generates an error object with the message of Required</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">throw new Error("Required"); // generates an error object with the message of Required</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto"><a href="https://stackoverflow.com/questions/11502052/throwing-strings-instead-of-errors" rel="nofollow">https://stackoverflow.com/questions/11502052/throwing-strings-instead-of-errors</a></p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto">The current documentation conveys the false impression that throw("message") might be a valid shorthand for throw new Error("message"). While it's not technically an error, it's extremely unhelpful, misleading, and unconventional. Conventionally catch statements expect e.message to be defined.</p>
<p dir="auto">If you're going to present examples of the alternatives with string/number/boolean instead of Error, don't put them before the conventional example with Error, and do add a cautionary note that those examples are unconventional.</p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/statements/throw</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/throw/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/statements/throw/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/0f3738f6b1ed1aa69395ff181207186e1ad9f4d8/hovercard" href="https://github.com/mdn/content/commit/0f3738f6b1ed1aa69395ff181207186e1ad9f4d8"><tt>0f3738f</tt></a></li>
<li>Document last modified: 2023-02-21T00:33:34.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Provide a definition for binding list]]></title>
            <link>https://github.com/mdn/content/issues/26875</link>
            <guid>https://github.com/mdn/content/issues/26875</guid>
            <pubDate>Sun, 21 May 2023 01:39:29 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator#using_the_comma_operator_to_join_assignments" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator#using_the_comma_operator_to_join_assignments</a></p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">Unclear whether <code class="notranslate">let a, b, c;</code> i use of comma operator or <code class="notranslate">BindingList</code>. The specification doesn't really clearly define what I <code class="notranslate">BindingList</code> is that I can see.</p>
<p dir="auto">MDN does not have a <code class="notranslate">BindingList</code> entry.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">Disambiguity between Comma operator and <code class="notranslate">BindlingList</code>.</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<ul dir="auto">
<li><a href="https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-comma-operator" rel="nofollow">https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-comma-operator</a></li>
<li><a href="https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#prod-BindingList" rel="nofollow">https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#prod-BindingList</a></li>
</ul>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto"><em>No response</em></p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/operators/comma_operator</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/comma_operator/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/comma_operator/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/d85a7ba8cca98c2f6cf67a0c44f0ffd467532f20/hovercard" href="https://github.com/mdn/content/commit/d85a7ba8cca98c2f6cf67a0c44f0ffd467532f20"><tt>d85a7ba</tt></a></li>
<li>Document last modified: 2023-04-05T04:57:48.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] FinalizationRegistry: missing example and lack of clarity on "threads"]]></title>
            <link>https://github.com/mdn/content/issues/26486</link>
            <guid>https://github.com/mdn/content/issues/26486</guid>
            <pubDate>Fri, 28 Apr 2023 20:00:14 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Notes on cleanup callbacks</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">The documentation does not say anything about the thread that will run the callbacks.</p>
<p dir="auto">It is very important because until the main thread "yields", they cannot run. And if the main thread never yields, they can only run at the end.<br>
This has been confirmed both in node and deno.</p>
<p dir="auto">Basically, without repeated calls to <code class="notranslate">setTimeout</code>, the callbacks never run.</p>
<p dir="auto">I think it is a fundamental piece of information, even considering all the disclaimers.</p>
<h3 dir="auto">What did you expect to see?</h3>
<ol dir="auto">
<li>information about the need of some sort of pause in the main thread</li>
<li>a complete example</li>
</ol>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto"><a href="https://github.com/orgs/nodejs/discussions/47716">https://github.com/orgs/nodejs/discussions/47716</a></p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto"><em>No response</em></p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/global_objects/finalizationregistry</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/finalizationregistry/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/finalizationregistry/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/7da0dabee277f9c295178ae132c16c8fed5d747a/hovercard" href="https://github.com/mdn/content/commit/7da0dabee277f9c295178ae132c16c8fed5d747a"><tt>7da0dab</tt></a></li>
<li>Document last modified: 2023-03-29T16:29:26.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Accessing WebAssembly memory using TypedArrays is incorrect on Big Endian systems]]></title>
            <link>https://github.com/mdn/content/issues/25569</link>
            <guid>https://github.com/mdn/content/issues/25569</guid>
            <pubDate>Thu, 23 Mar 2023 12:09:31 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory" rel="nofollow">https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Examples</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">The examples access values from WebAssembly using <code class="notranslate">new Uint32Array</code>:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  const summands = new Uint32Array(memory.buffer);
...
  const values = new Uint32Array(obj.instance.exports.memory.buffer);"><pre class="notranslate">  <span class="pl-k">const</span> <span class="pl-s1">summands</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">Uint32Array</span><span class="pl-kos">(</span><span class="pl-s1">memory</span><span class="pl-kos">.</span><span class="pl-c1">buffer</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
...
  <span class="pl-k">const</span> <span class="pl-s1">values</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">Uint32Array</span><span class="pl-kos">(</span><span class="pl-s1">obj</span><span class="pl-kos">.</span><span class="pl-c1">instance</span><span class="pl-kos">.</span><span class="pl-c1">exports</span><span class="pl-kos">.</span><span class="pl-c1">memory</span><span class="pl-kos">.</span><span class="pl-c1">buffer</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">However in the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array" rel="nofollow">Uint32Array docs</a> it says:</p>
<blockquote>
<p dir="auto">The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" rel="nofollow">DataView</a> instead.</p>
</blockquote>
<p dir="auto">(This is backed up by the ECMAScript spec: <a href="https://tc39.es/ecma262/#sec-properties-of-typedarray-instances" rel="nofollow">Typed Arrays are integer-indexed exotic objects</a>, <a href="https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-get-p-receiver" rel="nofollow">which have the [[Get]] internal method</a>, which calls <a href="https://tc39.es/ecma262/#sec-integerindexedelementget" rel="nofollow">IntegerIndexedElementGet</a>, which calls <a href="https://tc39.es/ecma262/#sec-getvaluefrombuffer" rel="nofollow">GetValueFromBuffer</a>, which uses the platforms endianness in steps 8 and 9.)</p>
<p dir="auto">However the <a href="https://webassembly.github.io/spec/core/syntax/instructions.html?highlight=endian#memory-instructions" rel="nofollow">WebAssembly docs</a> say:</p>
<blockquote>
<p dir="auto">All values are read and written in <em><strong>little endian</strong></em> byte order.</p>
</blockquote>
<p dir="auto">So it appears that the example will return incorrect results on big-endian systems.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">An example using a <code class="notranslate">DataView.setInt32(byteOffset, value, littleEndian)</code> instead.</p>
<p dir="auto">Exposing endian-ness like this has worrying implications for web page portability.<br>
If this is a real portability pitfall, there should be warnings about it on the WebAssembly.memory and TypedArray pages.</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto">I've already seen this pattern proliferating in several other places, such as:</p>
<ul dir="auto">
<li><a href="https://crates.io/crates/wasm-bindgen" rel="nofollow">wasm-bindgen</a> (I think)</li>
<li>Tutorials <a href="https://ariya.io/2019/05/basics-of-memory-access-in-webassembly" rel="nofollow">1</a> <a href="https://www.oreilly.com/library/view/webassembly-the-definitive/9781492089834/ch04.html" rel="nofollow">2</a> <a href="https://rob-blackbourn.github.io/blog/webassembly/wasm/array/arrays/javascript/c/2020/06/07/wasm-arrays.html" rel="nofollow">3</a></li>
<li>Questions <a href="https://groups.google.com/g/teavm/c/BlO4lkGNi40" rel="nofollow">1</a> <a href="https://stackoverflow.com/questions/41875728/pass-a-javascript-array-as-argument-to-a-webassembly-function" rel="nofollow">2</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Using_the_JavaScript_API" rel="nofollow">MDN: Using the WebAssembly Javascript API</a></li>
<li><a href="https://webassembly.org/getting-started/js-api/" rel="nofollow">webassembly.org: Understanding the JS API</a></li>
</ul>
<p dir="auto">So the amount of code already using this buggy pattern is already probably quite large.</p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto">Perhaps javascript could use a <code class="notranslate">LittleEndianTypedArray</code> or similar. And maybe <code class="notranslate">new Uint32Array(wasmmemory.buffer)</code> should throw a type error, only allowing <code class="notranslate">Uint8Array</code> and <code class="notranslate">Int8Array</code>.</p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/webassembly/javascript_interface/memory</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory" rel="nofollow">https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/webassembly/javascript_interface/memory/index.md">https://github.com/mdn/content/blob/main/files/en-us/webassembly/javascript_interface/memory/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/fe898ddf33314ee129256c3862c5c53106eeec1f/hovercard" href="https://github.com/mdn/content/commit/fe898ddf33314ee129256c3862c5c53106eeec1f"><tt>fe898dd</tt></a></li>
<li>Document last modified: 2023-02-23T10:05:41.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Misleading information around await's interaction with microtask/task queues]]></title>
            <link>https://github.com/mdn/content/issues/24177</link>
            <guid>https://github.com/mdn/content/issues/24177</guid>
            <pubDate>Sun, 05 Feb 2023 16:19:19 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Control flow effects of await</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<blockquote>
<p dir="auto">...all code that depends on the expression's value is paused and pushed into the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop" rel="nofollow">microtask queue</a>.</p>
</blockquote>
<p dir="auto"><code class="notranslate">await</code> does not inherently push anything into the microtask queue, at least not unless the promise being awaited is already settled.  The microtask queue is where promise tasks go after the promise is settled. <code class="notranslate">await</code> simply pauses the function. The microtask of resuming the function is added to the queue when the promise ultimately settles.</p>
<p dir="auto">The "microtask queue" link to the EventLoop page also has no mention of the microtask queue.</p>
<blockquote>
<p dir="auto">The main thread is then freed for the next task in the event loop. This happens even if the awaited value is an already-resolved promise or not a promise.</p>
</blockquote>
<p dir="auto">This only happens if the promise is not already settled (or does not get settled within further execution of the current task). If settled, function continuation is added to the microtask queue and the current task of the event loop continues to run until its microtask queue is empty.  You can create an event loop-blocking async function demonstrating this</p>
<div class="highlight highlight-source-ts notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="// blocks the event loop
async function loop(){
  await Promise.resolve()
  loop()
}
loop()"><pre class="notranslate"><span class="pl-c">// blocks the event loop</span>
<span class="pl-k">async</span> <span class="pl-k">function</span> <span class="pl-en">loop</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
  <span class="pl-k">await</span> <span class="pl-smi">Promise</span><span class="pl-kos">.</span><span class="pl-en">resolve</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
  <span class="pl-en">loop</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span>
<span class="pl-en">loop</span><span class="pl-kos">(</span><span class="pl-kos">)</span></pre></div>
<p dir="auto">Despite the use of await, the main thread is not freed to run the next task.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">A more accurate description await and its interactions with the task and microtask queues.</p>
<p dir="auto"><del>The microtask link is probably better directed to:</del><br>
<del><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide</a></del><br>
(see comment below)</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide</a></p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto"><em>No response</em></p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/operators/await</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/await/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/await/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/0e1f404f68142031b8f8d663af15ed6902352256/hovercard" href="https://github.com/mdn/content/commit/0e1f404f68142031b8f8d663af15ed6902352256"><tt>0e1f404</tt></a></li>
<li>Document last modified: 2022-12-27T01:31:43.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Document import assertions]]></title>
            <link>https://github.com/mdn/content/issues/19220</link>
            <guid>https://github.com/mdn/content/issues/19220</guid>
            <pubDate>Sat, 06 Aug 2022 05:08:53 GMT</pubDate>
            <content:encoded><![CDATA[<h2 dir="auto">What is the new suggestion?</h2>
<p dir="auto">Document <a href="https://github.com/tc39/proposal-import-assertions">import assertions</a>.</p>
<h2 dir="auto">Why is it important or useful?</h2>
<p dir="auto"><a href="https://v8.dev/features/import-assertions" rel="nofollow">Already shipped in V8 for over a year.</a> JSON modules have been unflagged in Node so a lot of people are starting to rely on it. Need more information on its syntax and semantics.</p>
<p dir="auto">Very importantly, import assertions do not change the semantics of the module itself—it cannot affect how the module is interpreted, nor can it be used as part of the cache key. Virtually all existing toolings, except JSON modules themselves (<code class="notranslate">assert { type: "json" }</code>), that try to extend import assertions are using them in a spec-incompliant way. (TBH, that to me means the proposal is designed poorly.) We need to call that out.</p>
<p dir="auto">We just need a new section under <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import</a>, but with so many additions to JavaScript modules in the future, it may make sense to start a new reference chapter like "modules", parallel to the existing "classes" and "functions" chapters...</p>
<h2 dir="auto">Other supporting information</h2>
<ul dir="auto">
<li>Spec draft: <a href="https://tc39.es/proposal-import-assertions/" rel="nofollow">https://tc39.es/proposal-import-assertions/</a></li>
<li>Proposal: <a href="https://github.com/tc39/proposal-import-assertions">https://github.com/tc39/proposal-import-assertions</a></li>
<li>This is a sibling proposal of <a href="https://github.com/tc39/proposal-json-modules">JSON modules</a>, so we should probably mention that as well.</li>
<li>Only after this proposal does <code class="notranslate">import()</code> have a second parameter and therefore optional trailing comma. <code class="notranslate">import("foo",)</code> works in Chrome but is a syntax error in Safari/Firefox. We need to add this to BCD and the trailing commas page: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas</a></li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript, FileAPI] Clean up irrelevant notes about old browser releases]]></title>
            <link>https://github.com/mdn/content/issues/9974</link>
            <guid>https://github.com/mdn/content/issues/9974</guid>
            <pubDate>Thu, 21 Oct 2021 07:48:17 GMT</pubDate>
            <content:encoded><![CDATA[<h2 dir="auto">What page(s) did you find the problem on?</h2>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/error" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/FileReader/error</a> says:</p>
<blockquote>
<p dir="auto">In Chrome 48+/Firefox 58+ this property returns a DOMException because DOMError has been removed from the DOM standard.</p>
</blockquote>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#regular_expressions" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#regular_expressions</a> says:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="typeof /s/ === 'function'; // Chrome 1-12 Non-conform to ECMAScript 5.1
typeof /s/ === 'object';   // Firefox 5+  Conform to ECMAScript 5.1"><pre class="notranslate"><span class="pl-k">typeof</span> <span class="pl-pds"><span class="pl-c1">/</span>s<span class="pl-c1">/</span></span> <span class="pl-c1">===</span> <span class="pl-s">'function'</span><span class="pl-kos">;</span> <span class="pl-c">// Chrome 1-12 Non-conform to ECMAScript 5.1</span>
<span class="pl-k">typeof</span> <span class="pl-pds"><span class="pl-c1">/</span>s<span class="pl-c1">/</span></span> <span class="pl-c1">===</span> <span class="pl-s">'object'</span><span class="pl-kos">;</span>   <span class="pl-c">// Firefox 5+  Conform to ECMAScript 5.1</span></pre></div>
<h2 dir="auto">What is the problem?</h2>
<p dir="auto">Information about quirks in very old browser releases seems like a net negative for readers of MDN. It will require readers to make a judgement about whether this could affect them, by testing or looking at release dates for the browsers.</p>
<h2 dir="auto">What did you expect to see?</h2>
<p dir="auto">Irrelevant information should be pruned from MDN after some time. Perhaps some special markup could be used when referring to a specific browser version, so that tools could be written to list information about browser releases too old to be relevant. Such cleanup happens to some extent in BCD, around irrelevant features removed from all browsers for more than 2 years, and also old flag data.</p>
<h2 dir="auto">Did you test this? If so, how?</h2>
<p dir="auto">Searching for "Chrome " + a number of any other browser followed by a number can find many examples like these.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Need a page on Execution context]]></title>
            <link>https://github.com/mdn/content/issues/5006</link>
            <guid>https://github.com/mdn/content/issues/5006</guid>
            <pubDate>Fri, 14 May 2021 18:14:38 GMT</pubDate>
            <content:encoded><![CDATA[<p dir="auto">MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</a></p>
<h4 dir="auto">What information was incorrect, unhelpful, or incomplete?</h4>
<p dir="auto">I didn't know where exactly to post the issue. I went for "this" cause the value of "this" is strictly related to the execution context.</p>
<h4 dir="auto">Specific section or headline?</h4>
<h4 dir="auto">What did you expect to see?</h4>
<h4 dir="auto">Did you test this? If so, how?</h4>

<details>
<summary>MDN Content page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/operators/this</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/this/index.html">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/this/index.html</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9/hovercard" href="https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9"><tt>13360cb</tt></a></li>
<li>Document last modified: 2021-05-05T10:31:52.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
    </channel>
</rss>