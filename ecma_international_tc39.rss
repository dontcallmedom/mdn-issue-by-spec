<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Ecma International TC39-relevant MDN issues</title>
        <link>https://dontcallmedom.github.io/mdn-issue-by-spec/ecma_international_tc39.rss</link>
        <description>Issue filed on MDN Web Docs related to pages attached to technologies developed by Ecma International TC39</description>
        <lastBuildDate>Thu, 11 Jan 2024 20:48:13 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[[ecmascript] Documentation Issue /  Should provide more context]]></title>
            <link>https://github.com/mdn/content/issues/31666</link>
            <guid>https://github.com/mdn/content/issues/31666</guid>
            <pubDate>Thu, 11 Jan 2024 20:48:13 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/xor" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/xor</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">This is a problem since we're moving away from atomics. especially if you run the script it says Error: SharedArrayBuffer is not defined.</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">We're not using Atomics anymore... instead, we're using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR" rel="nofollow">^</a></p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">Explanation of why we are moving away from this and why it doesn't work.</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto"><em>No response</em></p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto"><em>No response</em></p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/global_objects/atomics/xor</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/xor" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/xor</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/atomics/xor/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/atomics/xor/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/6a0f9553932823cd0c4dcf695d4b4813474964fb/hovercard" href="https://github.com/mdn/content/commit/6a0f9553932823cd0c4dcf695d4b4813474964fb"><tt>6a0f955</tt></a></li>
<li>Document last modified: 2023-04-12T16:34:04.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] What's the difference between a class prototype property and a function prototype property?]]></title>
            <link>https://github.com/mdn/content/issues/31649</link>
            <guid>https://github.com/mdn/content/issues/31649</guid>
            <pubDate>Thu, 11 Jan 2024 02:32:17 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype#value" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype#value</a></p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">Apologies upfront for misusing terminology. I'm still learning. By "class prototype property" I'm referring to the second line of this code:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="class X { };
X.prototype;"><pre class="notranslate"><span class="pl-k">class</span> <span class="pl-v">X</span> <span class="pl-kos">{</span> <span class="pl-kos">}</span><span class="pl-kos">;</span>
<span class="pl-v">X</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">I'm assuming this is very similar to the topic of this article, the function instance <code class="notranslate">prototype</code> property.</p>
<hr>
<p dir="auto">The article says:</p>
<blockquote>
<h2 dir="auto">Property attributes of Function: prototype</h2>
<p dir="auto">Writable | yes<br>
Enumerable | no<br>
Configurable | no</p>
<p dir="auto">Note: The prototype property of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow">classes</a> is not writable.</p>
</blockquote>
<ol dir="auto">
<li>Is this the only difference between the function prototype property and the class prototype property?
<ol dir="auto">
<li>Regardless, could this be explicitly stated in the note for clarification?</li>
</ol>
</li>
<li>Is there a reference article about the the <em>class prototype property</em>? The link in the note goes to a reference to classes in general, but I'm looking for something as focused as this function prototype article.</li>
</ol>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/global_objects/function/prototype</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/function/prototype/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/function/prototype/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/c2274293475b0a5b4febf85a49c1f91bf43ebac7/hovercard" href="https://github.com/mdn/content/commit/c2274293475b0a5b4febf85a49c1f91bf43ebac7"><tt>c227429</tt></a></li>
<li>Document last modified: 2023-05-03T02:24:26.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Raw template literals could use better explanation: latex is confusing and regexps unmentioned]]></title>
            <link>https://github.com/mdn/content/issues/30389</link>
            <guid>https://github.com/mdn/content/issues/30389</guid>
            <pubDate>Mon, 20 Nov 2023 02:49:25 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Raw strings</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">Raw strings are a confusing subtopic of template literals. They have some value, but the MDN article doesn't do a good job of explaining them or giving useful examples. The <code class="notranslate">latex</code> example presented is not given sufficient context to be useful, and there is no example using regular expressions, where (it seems to me) raw strings can give some real value.</p>
<p dir="auto">I'd be happy to submit a pull request with the text following the <code class="notranslate">&lt;hr&gt;</code> tag below for regular expressions.<br>
I am less sure what's appropriate for the <code class="notranslate">latex</code> example.</p>
<h3 dir="auto">What did you expect to see?</h3>
<h4 dir="auto">Regular Expressions</h4>
<p dir="auto">With respect to regular expressions, raw strings allow you to avoid double-escaping backslashes (just as the <code class="notranslate">/foobar/</code> regexp literal does) at the same time as allowing a delimiter that is not <code class="notranslate">/</code> (as is available in many other languages).<br>
For instance, an example like this might be helpful:</p>
<hr>
<p dir="auto">Combining a <code class="notranslate">String.raw</code> template literal with the <code class="notranslate">new RegExp()</code> constructor allows you to create regular expressions with an alternative delimiter other than a forward slash (<code class="notranslate">/</code>) without requiring double-escaping (<code class="notranslate">\\</code>) of regular expression escape sequences. This is especially valuable in strings that contain a lot of slashes, such as file paths or URLs.</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="// A String.raw template allows a fairly readable regular expression matching a URL:
const mdnJS_srtl = new RegExp(String.raw`https://developer\.mozilla\.org/en-US/docs/Web/JavaScript/Reference/`);

// The same thing with a regexp literal looks like this, with \/ for each forward slash:
const mdnJS_rl = /https:\/\/developer\.mozilla\.org\/en-US\/docs\/Web\/JavaScript\/Reference\//;

// And the same thing written with the RegExp constructor and a traditional string literal, with \\. for each period:
const mdnJS_str = new RegExp('https://developer\\.mozilla\\.org/en-US/docs/Web/JavaScript/Reference/');

console.log(mdnJS_srtl.source == mdnJS_rl.source)
// true
console.log(mdnJS_srtl.source == mdnJS_str.source)
// true
console.log(mdnJS_srtl.source)
// https:\/\/developer\.mozilla\.org\/en-US\/docs\/Web\/JavaScript\/Reference\/"><pre class="notranslate"><span class="pl-c">// A String.raw template allows a fairly readable regular expression matching a URL:</span>
<span class="pl-k">const</span> <span class="pl-s1">mdnJS_srtl</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">RegExp</span><span class="pl-kos">(</span><span class="pl-v">String</span><span class="pl-kos">.</span><span class="pl-en">raw</span><span class="pl-s">`https://developer\.mozilla\.org/en-US/docs/Web/JavaScript/Reference/`</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

<span class="pl-c">// The same thing with a regexp literal looks like this, with \/ for each forward slash:</span>
<span class="pl-k">const</span> <span class="pl-s1">mdnJS_rl</span> <span class="pl-c1">=</span> <span class="pl-pds"><span class="pl-c1">/</span>https:<span class="pl-cce">\/</span><span class="pl-cce">\/</span>developer<span class="pl-cce">\.</span>mozilla<span class="pl-cce">\.</span>org<span class="pl-cce">\/</span>en-US<span class="pl-cce">\/</span>docs<span class="pl-cce">\/</span>Web<span class="pl-cce">\/</span>JavaScript<span class="pl-cce">\/</span>Reference<span class="pl-cce">\/</span><span class="pl-c1">/</span></span><span class="pl-kos">;</span>

<span class="pl-c">// And the same thing written with the RegExp constructor and a traditional string literal, with \\. for each period:</span>
<span class="pl-k">const</span> <span class="pl-s1">mdnJS_str</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">RegExp</span><span class="pl-kos">(</span><span class="pl-s">'https://developer\\.mozilla\\.org/en-US/docs/Web/JavaScript/Reference/'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">mdnJS_srtl</span><span class="pl-kos">.</span><span class="pl-c1">source</span> <span class="pl-c1">==</span> <span class="pl-s1">mdnJS_rl</span><span class="pl-kos">.</span><span class="pl-c1">source</span><span class="pl-kos">)</span>
<span class="pl-c">// true</span>
<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">mdnJS_srtl</span><span class="pl-kos">.</span><span class="pl-c1">source</span> <span class="pl-c1">==</span> <span class="pl-s1">mdnJS_str</span><span class="pl-kos">.</span><span class="pl-c1">source</span><span class="pl-kos">)</span>
<span class="pl-c">// true</span>
<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">mdnJS_srtl</span><span class="pl-kos">.</span><span class="pl-c1">source</span><span class="pl-kos">)</span>
<span class="pl-c">// https:\/\/developer\.mozilla\.org\/en-US\/docs\/Web\/JavaScript\/Reference\/</span></pre></div>
<h4 dir="auto">The <code class="notranslate">latex</code> tag</h4>
<p dir="auto">The page sketches an example of a <code class="notranslate">latex</code> tag template literal, but doesn't explain why it might be useful:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function latex(str) {
  return { cooked: str[0], raw: str.raw[0] };
}

latex`\unicode`;

// { cooked: undefined, raw: &quot;\\unicode&quot; }"><pre class="notranslate"><span class="pl-k">function</span> <span class="pl-en">latex</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">return</span> <span class="pl-kos">{</span> <span class="pl-c1">cooked</span>: <span class="pl-s1">str</span><span class="pl-kos">[</span><span class="pl-c1">0</span><span class="pl-kos">]</span><span class="pl-kos">,</span> <span class="pl-c1">raw</span>: <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">raw</span><span class="pl-kos">[</span><span class="pl-c1">0</span><span class="pl-kos">]</span> <span class="pl-kos">}</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>

<span class="pl-en">latex</span><span class="pl-s">`\u<span class="pl-s1">nicode</span>`</span><span class="pl-kos">;</span>

<span class="pl-c">// { cooked: undefined, raw: "\\unicode" }</span></pre></div>
<p dir="auto">It appears that this would need to be used in some context where code expected an object with a raw attribute, and mostly ignored presence of the cooked attribute. I don't know quite what that context would be. I suppose it could be something like:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="beginObject= latex`\documentclass{article}`;
// {  &quot;cooked&quot;: &quot;documentclass{article}&quot;,  &quot;raw&quot;: &quot;\\documentclass{article}&quot;
console.log(`It's normal in LaTeX to begin your document with ${beginObject.raw}`);"><pre class="notranslate"><span class="pl-s1">beginObject</span><span class="pl-c1">=</span> <span class="pl-en">latex</span><span class="pl-s">`\documentclass{article}`</span><span class="pl-kos">;</span>
<span class="pl-c">// {  "cooked": "documentclass{article}",  "raw": "\\documentclass{article}"</span>
<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">`It's normal in LaTeX to begin your document with <span class="pl-s1"><span class="pl-kos">${</span><span class="pl-s1">beginObject</span><span class="pl-kos">.</span><span class="pl-c1">raw</span><span class="pl-kos">}</span></span>`</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">But this feels convoluted and confusing. I don't understand why it's the example.<br>
A more straightforward way to write this would be either:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="beginString = String.raw`\documentclass{article}`;
console.log(`It's normal in LaTeX to begin your document with ${beginString}`);"><pre class="notranslate"><span class="pl-s1">beginString</span> <span class="pl-c1">=</span> <span class="pl-v">String</span><span class="pl-kos">.</span><span class="pl-en">raw</span><span class="pl-s">`\documentclass{article}`</span><span class="pl-kos">;</span>
<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">`It's normal in LaTeX to begin your document with <span class="pl-s1"><span class="pl-kos">${</span><span class="pl-s1">beginString</span><span class="pl-kos">}</span></span>`</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">Or if the goal is to demonstrate the value of tagged templates, then a simpler template:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function LaTeX(str) { 
  return str.raw[0];
}

beginString = LaTeX`\documentclass{article}`;
console.log(`It's normal in LaTeX to begin your document with ${beginString}`);"><pre class="notranslate"><span class="pl-k">function</span> <span class="pl-v">LaTeX</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span> 
  <span class="pl-k">return</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">raw</span><span class="pl-kos">[</span><span class="pl-c1">0</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>

<span class="pl-s1">beginString</span> <span class="pl-c1">=</span> <span class="pl-v">LaTeX</span><span class="pl-s">`\documentclass{article}`</span><span class="pl-kos">;</span>
<span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">`It's normal in LaTeX to begin your document with <span class="pl-s1"><span class="pl-kos">${</span><span class="pl-s1">beginString</span><span class="pl-kos">}</span></span>`</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">Because I'm not sure what the current example is trying to demonstrate, I'm not sure how to improve the example to show it better. Help?</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto">I've found very few examples of raw strings in template literals for regular expressions.<br>
I suspect they would be a more used pattern if they were better understood and explained.</p>
<p dir="auto">There are some decent examples as <a href="https://exploringjs.com/impatient-js/ch_template-literals.html#raw-string-literals" rel="nofollow">https://exploringjs.com/impatient-js/ch_template-literals.html#raw-string-literals</a> although it doesn't explain the outer delimiter advantage.</p>
<p dir="auto">One not-very-helpful-place is this optional ESlint rule, <a href="https://eslint.org/docs/latest/rules/prefer-regex-literals" rel="nofollow">https://eslint.org/docs/latest/rules/prefer-regex-literals</a>, which discourages the use of the <code class="notranslate">new RegExp()</code> constructor in place of regexp literals for static content.<br>
So that rule also disallows</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="new RegExp(String.raw`^\d\.$`);"><pre class="notranslate"><span class="pl-k">new</span> <span class="pl-v">RegExp</span><span class="pl-kos">(</span><span class="pl-v">String</span><span class="pl-kos">.</span><span class="pl-en">raw</span><span class="pl-s">`^\d\.$`</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">which is an example of this. But this ESlint rule is not enabled by default (and probably should not be, because of the readability value of raw strings combined with RegExp literals).</p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto">I had trouble finding the history of who wrote the text about the <code class="notranslate">latex</code> template and whether there was originally more to the example.</p>
<p dir="auto">The text is essentially unchanged since <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/cbe151a06d6e5b4d1fbb46081bd16e69ef4c1630/hovercard" href="https://github.com/mdn/content/commit/cbe151a06d6e5b4d1fbb46081bd16e69ef4c1630"><tt>cbe151a</tt></a> when it was imported from the prior MDN system, which I guess was a wiki stored in SQL? I'm not sure where to find that history, if it even matters.</p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/template_literals</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/template_literals/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/template_literals/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/cbfc561e5e577975a51acceadbd7d2fec9b8e45e/hovercard" href="https://github.com/mdn/content/commit/cbfc561e5e577975a51acceadbd7d2fec9b8e45e"><tt>cbfc561</tt></a></li>
<li>Document last modified: 2023-11-14T13:08:57.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Describe direct and indirect eval differences in each bullet point]]></title>
            <link>https://github.com/mdn/content/issues/30281</link>
            <guid>https://github.com/mdn/content/issues/30281</guid>
            <pubDate>Tue, 14 Nov 2023 22:14:49 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Direct and indirect eval</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">In this issue, I'm referring to the contents between these two lines of text (exclusive):</p>
<blockquote>
<p dir="auto">Indirect eval can be seen as if the code is evaluated within a separate <code class="notranslate">&lt;script&gt;</code> tag. This means:<br>
...</p>
<h3 dir="auto">Never use eval()!</h3>
</blockquote>
<p dir="auto">The <code class="notranslate">...</code> is a bullet point list containing explanations and examples of the differences between the two eval modes.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">It's difficult for me to parse some bullet points because:</p>
<ol dir="auto">
<li>The text (as opposed to the example code) sometimes explains one eval mode but not the other. On the other hand, sometimes it explains both:
<ol dir="auto">
<li>At first glance, it can appear like a bullet point only applies to one mode even though that's not the case.</li>
<li>It can take more effort to read example code than an English sentence.</li>
</ol>
</li>
<li>Some text is written in negative form—e.g., "<strong>In</strong>direct eval <strong>would not</strong> inherit the strictness of the surrounding context"—which, in my opinion, is harder to read than positive form: "Direct eval inherits the strictness of the surrounding context."</li>
<li>Some example code blocks contain examples of both modes, some contain only one mode.
<ol dir="auto">
<li>This can obscure where a bullet point starts and where it ends.</li>
<li>This makes it challenging to scan for differences between the two modes.</li>
</ol>
</li>
<li>There is another section named <code class="notranslate">Using indirect eval()</code>, giving me a sense that some information is divided between both sections.
<ol dir="auto">
<li>Even if this isn't true, it gives me the impression that neither section is comprehensive.</li>
</ol>
</li>
</ol>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto"><em>No response</em></p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto">Apologies if my wording offended anyone. My intent was to be concise, not rude.</p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/global_objects/eval</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/eval/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/eval/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/4c26e8a3fb50d06963b06017f51ce19364350564/hovercard" href="https://github.com/mdn/content/commit/4c26e8a3fb50d06963b06017f51ce19364350564"><tt>4c26e8a</tt></a></li>
<li>Document last modified: 2023-08-11T08:07:46.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Import assertions proposal renamed to import attributes]]></title>
            <link>https://github.com/mdn/content/issues/29572</link>
            <guid>https://github.com/mdn/content/issues/29572</guid>
            <pubDate>Tue, 10 Oct 2023 08:50:02 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto"><em>No response</em></p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">That page mention import assertions, with the <code class="notranslate">import ... assert { ... }</code> syntax.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">The proposal has been renamed to "import attributes", and the keyword has been replaced from <code class="notranslate">assert</code> to <code class="notranslate">with</code>. <code class="notranslate">assert</code> is now "deprecated and should not be relied upon".</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto"><a href="https://tc39.es/proposal-import-attributes/" rel="nofollow">https://tc39.es/proposal-import-attributes/</a>, specifically <a href="https://tc39.es/proposal-import-attributes/#sec-deprecated-assert-keyword-for-import-attributes" rel="nofollow">https://tc39.es/proposal-import-attributes/#sec-deprecated-assert-keyword-for-import-attributes</a>.</p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto">Chrome is the only browser implementing <code class="notranslate">assert</code> (and V8-based platforms).</p>
<p dir="auto">Chrome implements <code class="notranslate">with</code> under a flag (and V8-based platforms), Safari implements <code class="notranslate">with</code> in TP and Firefox is implementing it.</p>
<p dir="auto">The proposal update comes also with some semantic changes, however these details have never been documented so there is no change needed to the docs:</p>
<ul dir="auto">
<li>invalid attribute keys are now disallowed, rather than silently ignored</li>
<li>JSON and CSS modules are fetched with the appropriate HTTP headers (<a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="1787684142" data-permission-text="Title is private" data-url="https://github.com/whatwg/html/issues/9486" data-hovercard-type="pull_request" data-hovercard-url="/whatwg/html/pull/9486/hovercard" href="https://github.com/whatwg/html/pull/9486">whatwg/html#9486</a>)</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Include information/section on "Method definitions in object literals"]]></title>
            <link>https://github.com/mdn/content/issues/29489</link>
            <guid>https://github.com/mdn/content/issues/29489</guid>
            <pubDate>Thu, 05 Oct 2023 00:01:28 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions#method_definitions_in_classes" rel="nofollow">Method definitions in classes</a></p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto"><em>From my perspective</em>, this is incomplete:</p>
<blockquote>
<p dir="auto">Public instance methods are defined on the prototype property of the class and are thus shared by all instances of the class. They are writable, non-enumerable, and configurable.</p>
</blockquote>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">I'm browsing the documentation because I'm trying to learn the difference between these two:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="class ClassWithPublicInstanceMethod {
  publicMethod() {
    return &quot;hello world&quot;;
  }
}

const objectLiteralMethod = {
  publicMethod() {
    return &quot;hello world&quot;;
  }
}"><pre class="notranslate"><span class="pl-k">class</span> <span class="pl-v">ClassWithPublicInstanceMethod</span> <span class="pl-kos">{</span>
  <span class="pl-en">publicMethod</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-s">"hello world"</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span>
<span class="pl-kos">}</span>

<span class="pl-k">const</span> <span class="pl-s1">objectLiteralMethod</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
  <span class="pl-en">publicMethod</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-s">"hello world"</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div>
<p dir="auto">But as far as I can tell, the article only explains this for classes. If it mentions how this works on object literals, none of the following section names imply that. This also seems like the most appropriate article for this information; if it's documented elsewhere, I'm not sure where else to look.</p>
<p dir="auto">I found some information in another page: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#method_definitions" rel="nofollow">Object initializer</a>. It doesn't answer my question, but maybe it could be linked to and/or updated to include the answer instead? I don't prefer the latter: I wouldn't expect the information to be there when there's another article title "Method definitions."</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto">n/a</p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto">It might make sense to create a whole new section for this information? This section is called "<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions#method_definitions_in_classes" rel="nofollow">Method definitions in classes</a>", but I'm looking for information regarding "Method definitions in object literals."</p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/functions/method_definitions</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/functions/method_definitions/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/functions/method_definitions/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/4f86aad2b0b66c0d2041354ec81400c574ab56ca/hovercard" href="https://github.com/mdn/content/commit/4f86aad2b0b66c0d2041354ec81400c574ab56ca"><tt>4f86aad</tt></a></li>
<li>Document last modified: 2023-09-12T03:52:28.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Macrotasks and Microtasks]]></title>
            <link>https://github.com/mdn/content/issues/28795</link>
            <guid>https://github.com/mdn/content/issues/28795</guid>
            <pubDate>Mon, 28 Aug 2023 09:55:38 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Control flow effects of await</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">When an await is encountered in code (either in an async function or in a module), the awaited expression is executed, while all code that depends on the expression's value is paused and pushed into the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop" rel="nofollow">microtask queue</a>. The main thread is then freed for the next task in the event loop...</p>
<p dir="auto">For me, <em><strong>The main thread is then freed for the next task in the event loop</strong></em>, sounds like that next task from macrotask queue will be executed before any microtask that was pushed into the microtask queue.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">The main thread is then freed for the next task in the event loop which will be executed after any microtask e.g. code that depends on the expression's value.</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto"><a href="https://javascript.info/event-loop#macrotasks-and-microtasks" rel="nofollow">https://javascript.info/event-loop#macrotasks-and-microtasks</a></p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto"><em>No response</em></p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/operators/await</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/await/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/await/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/3c33463072905e81ac620dd9780313369029b498/hovercard" href="https://github.com/mdn/content/commit/3c33463072905e81ac620dd9780313369029b498"><tt>3c33463</tt></a></li>
<li>Document last modified: 2023-06-29T17:06:46.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Accessing WebAssembly memory using TypedArrays is incorrect on Big Endian systems]]></title>
            <link>https://github.com/mdn/content/issues/25569</link>
            <guid>https://github.com/mdn/content/issues/25569</guid>
            <pubDate>Thu, 23 Mar 2023 12:09:31 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory" rel="nofollow">https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Examples</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">The examples access values from WebAssembly using <code class="notranslate">new Uint32Array</code>:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  const summands = new Uint32Array(memory.buffer);
...
  const values = new Uint32Array(obj.instance.exports.memory.buffer);"><pre class="notranslate">  <span class="pl-k">const</span> <span class="pl-s1">summands</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">Uint32Array</span><span class="pl-kos">(</span><span class="pl-s1">memory</span><span class="pl-kos">.</span><span class="pl-c1">buffer</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
...
  <span class="pl-k">const</span> <span class="pl-s1">values</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">Uint32Array</span><span class="pl-kos">(</span><span class="pl-s1">obj</span><span class="pl-kos">.</span><span class="pl-c1">instance</span><span class="pl-kos">.</span><span class="pl-c1">exports</span><span class="pl-kos">.</span><span class="pl-c1">memory</span><span class="pl-kos">.</span><span class="pl-c1">buffer</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">However in the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array" rel="nofollow">Uint32Array docs</a> it says:</p>
<blockquote>
<p dir="auto">The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" rel="nofollow">DataView</a> instead.</p>
</blockquote>
<p dir="auto">(This is backed up by the ECMAScript spec: <a href="https://tc39.es/ecma262/#sec-properties-of-typedarray-instances" rel="nofollow">Typed Arrays are integer-indexed exotic objects</a>, <a href="https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-get-p-receiver" rel="nofollow">which have the [[Get]] internal method</a>, which calls <a href="https://tc39.es/ecma262/#sec-integerindexedelementget" rel="nofollow">IntegerIndexedElementGet</a>, which calls <a href="https://tc39.es/ecma262/#sec-getvaluefrombuffer" rel="nofollow">GetValueFromBuffer</a>, which uses the platforms endianness in steps 8 and 9.)</p>
<p dir="auto">However the <a href="https://webassembly.github.io/spec/core/syntax/instructions.html?highlight=endian#memory-instructions" rel="nofollow">WebAssembly docs</a> say:</p>
<blockquote>
<p dir="auto">All values are read and written in <em><strong>little endian</strong></em> byte order.</p>
</blockquote>
<p dir="auto">So it appears that the example will return incorrect results on big-endian systems.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">An example using a <code class="notranslate">DataView.setInt32(byteOffset, value, littleEndian)</code> instead.</p>
<p dir="auto">Exposing endian-ness like this has worrying implications for web page portability.<br>
If this is a real portability pitfall, there should be warnings about it on the WebAssembly.memory and TypedArray pages.</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto">I've already seen this pattern proliferating in several other places, such as:</p>
<ul dir="auto">
<li><a href="https://crates.io/crates/wasm-bindgen" rel="nofollow">wasm-bindgen</a> (I think)</li>
<li>Tutorials <a href="https://ariya.io/2019/05/basics-of-memory-access-in-webassembly" rel="nofollow">1</a> <a href="https://www.oreilly.com/library/view/webassembly-the-definitive/9781492089834/ch04.html" rel="nofollow">2</a> <a href="https://rob-blackbourn.github.io/blog/webassembly/wasm/array/arrays/javascript/c/2020/06/07/wasm-arrays.html" rel="nofollow">3</a></li>
<li>Questions <a href="https://groups.google.com/g/teavm/c/BlO4lkGNi40" rel="nofollow">1</a> <a href="https://stackoverflow.com/questions/41875728/pass-a-javascript-array-as-argument-to-a-webassembly-function" rel="nofollow">2</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Using_the_JavaScript_API" rel="nofollow">MDN: Using the WebAssembly Javascript API</a></li>
<li><a href="https://webassembly.org/getting-started/js-api/" rel="nofollow">webassembly.org: Understanding the JS API</a></li>
</ul>
<p dir="auto">So the amount of code already using this buggy pattern is already probably quite large.</p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto">Perhaps javascript could use a <code class="notranslate">LittleEndianTypedArray</code> or similar. And maybe <code class="notranslate">new Uint32Array(wasmmemory.buffer)</code> should throw a type error, only allowing <code class="notranslate">Uint8Array</code> and <code class="notranslate">Int8Array</code>.</p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/webassembly/javascript_interface/memory</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory" rel="nofollow">https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/webassembly/javascript_interface/memory/index.md">https://github.com/mdn/content/blob/main/files/en-us/webassembly/javascript_interface/memory/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/fe898ddf33314ee129256c3862c5c53106eeec1f/hovercard" href="https://github.com/mdn/content/commit/fe898ddf33314ee129256c3862c5c53106eeec1f"><tt>fe898dd</tt></a></li>
<li>Document last modified: 2023-02-23T10:05:41.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Misleading information around await's interaction with microtask/task queues]]></title>
            <link>https://github.com/mdn/content/issues/24177</link>
            <guid>https://github.com/mdn/content/issues/24177</guid>
            <pubDate>Sun, 05 Feb 2023 16:19:19 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Control flow effects of await</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<blockquote>
<p dir="auto">...all code that depends on the expression's value is paused and pushed into the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop" rel="nofollow">microtask queue</a>.</p>
</blockquote>
<p dir="auto"><code class="notranslate">await</code> does not inherently push anything into the microtask queue, at least not unless the promise being awaited is already settled.  The microtask queue is where promise tasks go after the promise is settled. <code class="notranslate">await</code> simply pauses the function. The microtask of resuming the function is added to the queue when the promise ultimately settles.</p>
<p dir="auto">The "microtask queue" link to the EventLoop page also has no mention of the microtask queue.</p>
<blockquote>
<p dir="auto">The main thread is then freed for the next task in the event loop. This happens even if the awaited value is an already-resolved promise or not a promise.</p>
</blockquote>
<p dir="auto">This only happens if the promise is not already settled (or does not get settled within further execution of the current task). If settled, function continuation is added to the microtask queue and the current task of the event loop continues to run until its microtask queue is empty.  You can create an event loop-blocking async function demonstrating this</p>
<div class="highlight highlight-source-ts notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="// blocks the event loop
async function loop(){
  await Promise.resolve()
  loop()
}
loop()"><pre class="notranslate"><span class="pl-c">// blocks the event loop</span>
<span class="pl-k">async</span> <span class="pl-k">function</span> <span class="pl-en">loop</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
  <span class="pl-k">await</span> <span class="pl-smi">Promise</span><span class="pl-kos">.</span><span class="pl-en">resolve</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
  <span class="pl-en">loop</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span>
<span class="pl-en">loop</span><span class="pl-kos">(</span><span class="pl-kos">)</span></pre></div>
<p dir="auto">Despite the use of await, the main thread is not freed to run the next task.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">A more accurate description await and its interactions with the task and microtask queues.</p>
<p dir="auto"><del>The microtask link is probably better directed to:</del><br>
<del><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide</a></del><br>
(see comment below)</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide</a></p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto"><em>No response</em></p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/operators/await</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/await/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/await/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/0e1f404f68142031b8f8d663af15ed6902352256/hovercard" href="https://github.com/mdn/content/commit/0e1f404f68142031b8f8d663af15ed6902352256"><tt>0e1f404</tt></a></li>
<li>Document last modified: 2022-12-27T01:31:43.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Need a page on Execution context]]></title>
            <link>https://github.com/mdn/content/issues/5006</link>
            <guid>https://github.com/mdn/content/issues/5006</guid>
            <pubDate>Fri, 14 May 2021 18:14:38 GMT</pubDate>
            <content:encoded><![CDATA[<p dir="auto">MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</a></p>
<h4 dir="auto">What information was incorrect, unhelpful, or incomplete?</h4>
<p dir="auto">I didn't know where exactly to post the issue. I went for "this" cause the value of "this" is strictly related to the execution context.</p>
<h4 dir="auto">Specific section or headline?</h4>
<h4 dir="auto">What did you expect to see?</h4>
<h4 dir="auto">Did you test this? If so, how?</h4>

<details>
<summary>MDN Content page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/operators/this</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/this/index.html">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/this/index.html</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9/hovercard" href="https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9"><tt>13360cb</tt></a></li>
<li>Document last modified: 2021-05-05T10:31:52.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
    </channel>
</rss>