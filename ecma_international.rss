<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Ecma International-relevant MDN issues</title>
        <link>https://dontcallmedom.github.io/mdn-issue-by-spec/ecma_international.rss</link>
        <description>Issue filed on MDN Web Docs related to pages attached to technologies developed by Ecma International</description>
        <lastBuildDate>Thu, 24 Aug 2023 12:27:42 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[[webaudio, ecmascript] Incorrect return value for OfflineAudioContext.startRendering]]></title>
            <link>https://github.com/mdn/content/issues/28732</link>
            <guid>https://github.com/mdn/content/issues/28732</guid>
            <pubDate>Thu, 24 Aug 2023 12:27:42 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/startRendering" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/startRendering</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Return value</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">The return value is listed as "None (undefined)"</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">"A <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="nofollow">Promise</a> resolving to an <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer" rel="nofollow">AudioBuffer</a>"</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto">The 'Examples' section below 'Return value', states that "When the startRendering() promise resolves, rendering has completed and the output AudioBuffer is returned out of the promise."</p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/32961755/262971698-e7ebadc1-9c44-40f0-9bae-8b366f05b3af.png"><img width="648" alt="image" src="https://user-images.githubusercontent.com/32961755/262971698-e7ebadc1-9c44-40f0-9bae-8b366f05b3af.png" style="max-width: 100%;"></a>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/api/offlineaudiocontext/startrendering</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/startRendering" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/startRendering</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/api/offlineaudiocontext/startrendering/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/api/offlineaudiocontext/startrendering/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/312081aabba3885b35a81107b3c2fc53428896c5/hovercard" href="https://github.com/mdn/content/commit/312081aabba3885b35a81107b3c2fc53428896c5"><tt>312081a</tt></a></li>
<li>Document last modified: 2023-04-07T06:19:30.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Accessing WebAssembly memory using TypedArrays is incorrect on Big Endian systems]]></title>
            <link>https://github.com/mdn/content/issues/25569</link>
            <guid>https://github.com/mdn/content/issues/25569</guid>
            <pubDate>Thu, 23 Mar 2023 12:09:31 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory" rel="nofollow">https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Examples</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<p dir="auto">The examples access values from WebAssembly using <code class="notranslate">new Uint32Array</code>:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  const summands = new Uint32Array(memory.buffer);
...
  const values = new Uint32Array(obj.instance.exports.memory.buffer);"><pre class="notranslate">  <span class="pl-k">const</span> <span class="pl-s1">summands</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">Uint32Array</span><span class="pl-kos">(</span><span class="pl-s1">memory</span><span class="pl-kos">.</span><span class="pl-c1">buffer</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
...
  <span class="pl-k">const</span> <span class="pl-s1">values</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> <span class="pl-v">Uint32Array</span><span class="pl-kos">(</span><span class="pl-s1">obj</span><span class="pl-kos">.</span><span class="pl-c1">instance</span><span class="pl-kos">.</span><span class="pl-c1">exports</span><span class="pl-kos">.</span><span class="pl-c1">memory</span><span class="pl-kos">.</span><span class="pl-c1">buffer</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">However in the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array" rel="nofollow">Uint32Array docs</a> it says:</p>
<blockquote>
<p dir="auto">The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" rel="nofollow">DataView</a> instead.</p>
</blockquote>
<p dir="auto">(This is backed up by the ECMAScript spec: <a href="https://tc39.es/ecma262/#sec-properties-of-typedarray-instances" rel="nofollow">Typed Arrays are integer-indexed exotic objects</a>, <a href="https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-get-p-receiver" rel="nofollow">which have the [[Get]] internal method</a>, which calls <a href="https://tc39.es/ecma262/#sec-integerindexedelementget" rel="nofollow">IntegerIndexedElementGet</a>, which calls <a href="https://tc39.es/ecma262/#sec-getvaluefrombuffer" rel="nofollow">GetValueFromBuffer</a>, which uses the platforms endianness in steps 8 and 9.)</p>
<p dir="auto">However the <a href="https://webassembly.github.io/spec/core/syntax/instructions.html?highlight=endian#memory-instructions" rel="nofollow">WebAssembly docs</a> say:</p>
<blockquote>
<p dir="auto">All values are read and written in <em><strong>little endian</strong></em> byte order.</p>
</blockquote>
<p dir="auto">So it appears that the example will return incorrect results on big-endian systems.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">An example using a <code class="notranslate">DataView.setInt32(byteOffset, value, littleEndian)</code> instead.</p>
<p dir="auto">Exposing endian-ness like this has worrying implications for web page portability.<br>
If this is a real portability pitfall, there should be warnings about it on the WebAssembly.memory and TypedArray pages.</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto">I've already seen this pattern proliferating in several other places, such as:</p>
<ul dir="auto">
<li><a href="https://crates.io/crates/wasm-bindgen" rel="nofollow">wasm-bindgen</a> (I think)</li>
<li>Tutorials <a href="https://ariya.io/2019/05/basics-of-memory-access-in-webassembly" rel="nofollow">1</a> <a href="https://www.oreilly.com/library/view/webassembly-the-definitive/9781492089834/ch04.html" rel="nofollow">2</a> <a href="https://rob-blackbourn.github.io/blog/webassembly/wasm/array/arrays/javascript/c/2020/06/07/wasm-arrays.html" rel="nofollow">3</a></li>
<li>Questions <a href="https://groups.google.com/g/teavm/c/BlO4lkGNi40" rel="nofollow">1</a> <a href="https://stackoverflow.com/questions/41875728/pass-a-javascript-array-as-argument-to-a-webassembly-function" rel="nofollow">2</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Using_the_JavaScript_API" rel="nofollow">MDN: Using the WebAssembly Javascript API</a></li>
<li><a href="https://webassembly.org/getting-started/js-api/" rel="nofollow">webassembly.org: Understanding the JS API</a></li>
</ul>
<p dir="auto">So the amount of code already using this buggy pattern is already probably quite large.</p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto">Perhaps javascript could use a <code class="notranslate">LittleEndianTypedArray</code> or similar. And maybe <code class="notranslate">new Uint32Array(wasmmemory.buffer)</code> should throw a type error, only allowing <code class="notranslate">Uint8Array</code> and <code class="notranslate">Int8Array</code>.</p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/webassembly/javascript_interface/memory</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory" rel="nofollow">https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/webassembly/javascript_interface/memory/index.md">https://github.com/mdn/content/blob/main/files/en-us/webassembly/javascript_interface/memory/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/fe898ddf33314ee129256c3862c5c53106eeec1f/hovercard" href="https://github.com/mdn/content/commit/fe898ddf33314ee129256c3862c5c53106eeec1f"><tt>fe898dd</tt></a></li>
<li>Document last modified: 2023-02-23T10:05:41.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Misleading information around await's interaction with microtask/task queues]]></title>
            <link>https://github.com/mdn/content/issues/24177</link>
            <guid>https://github.com/mdn/content/issues/24177</guid>
            <pubDate>Sun, 05 Feb 2023 16:19:19 GMT</pubDate>
            <content:encoded><![CDATA[<h3 dir="auto">MDN URL</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await</a></p>
<h3 dir="auto">What specific section or headline is this issue about?</h3>
<p dir="auto">Control flow effects of await</p>
<h3 dir="auto">What information was incorrect, unhelpful, or incomplete?</h3>
<blockquote>
<p dir="auto">...all code that depends on the expression's value is paused and pushed into the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop" rel="nofollow">microtask queue</a>.</p>
</blockquote>
<p dir="auto"><code class="notranslate">await</code> does not inherently push anything into the microtask queue, at least not unless the promise being awaited is already settled.  The microtask queue is where promise tasks go after the promise is settled. <code class="notranslate">await</code> simply pauses the function. The microtask of resuming the function is added to the queue when the promise ultimately settles.</p>
<p dir="auto">The "microtask queue" link to the EventLoop page also has no mention of the microtask queue.</p>
<blockquote>
<p dir="auto">The main thread is then freed for the next task in the event loop. This happens even if the awaited value is an already-resolved promise or not a promise.</p>
</blockquote>
<p dir="auto">This only happens if the promise is not already settled (or does not get settled within further execution of the current task). If settled, function continuation is added to the microtask queue and the current task of the event loop continues to run until its microtask queue is empty.  You can create an event loop-blocking async function demonstrating this</p>
<div class="highlight highlight-source-ts notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="// blocks the event loop
async function loop(){
  await Promise.resolve()
  loop()
}
loop()"><pre class="notranslate"><span class="pl-c">// blocks the event loop</span>
<span class="pl-k">async</span> <span class="pl-k">function</span> <span class="pl-en">loop</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
  <span class="pl-k">await</span> <span class="pl-smi">Promise</span><span class="pl-kos">.</span><span class="pl-en">resolve</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
  <span class="pl-en">loop</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-kos">}</span>
<span class="pl-en">loop</span><span class="pl-kos">(</span><span class="pl-kos">)</span></pre></div>
<p dir="auto">Despite the use of await, the main thread is not freed to run the next task.</p>
<h3 dir="auto">What did you expect to see?</h3>
<p dir="auto">A more accurate description await and its interactions with the task and microtask queues.</p>
<p dir="auto"><del>The microtask link is probably better directed to:</del><br>
<del><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide</a></del><br>
(see comment below)</p>
<h3 dir="auto">Do you have any supporting links, references, or citations?</h3>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide</a></p>
<h3 dir="auto">Do you have anything more you want to share?</h3>
<p dir="auto"><em>No response</em></p>
<h3 dir="auto">MDN metadata</h3>

<details>
<summary>Page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/operators/await</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/await/index.md">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/await/index.md</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/0e1f404f68142031b8f8d663af15ed6902352256/hovercard" href="https://github.com/mdn/content/commit/0e1f404f68142031b8f8d663af15ed6902352256"><tt>0e1f404</tt></a></li>
<li>Document last modified: 2022-12-27T01:31:43.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript, FileAPI] Clean up irrelevant notes about old browser releases]]></title>
            <link>https://github.com/mdn/content/issues/9974</link>
            <guid>https://github.com/mdn/content/issues/9974</guid>
            <pubDate>Thu, 21 Oct 2021 07:48:17 GMT</pubDate>
            <content:encoded><![CDATA[<h2 dir="auto">What page(s) did you find the problem on?</h2>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader/error" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/FileReader/error</a> says:</p>
<blockquote>
<p dir="auto">In Chrome 48+/Firefox 58+ this property returns a DOMException because DOMError has been removed from the DOM standard.</p>
</blockquote>
<p dir="auto"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#regular_expressions" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#regular_expressions</a> says:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="typeof /s/ === 'function'; // Chrome 1-12 Non-conform to ECMAScript 5.1
typeof /s/ === 'object';   // Firefox 5+  Conform to ECMAScript 5.1"><pre class="notranslate"><span class="pl-k">typeof</span> <span class="pl-pds"><span class="pl-c1">/</span>s<span class="pl-c1">/</span></span> <span class="pl-c1">===</span> <span class="pl-s">'function'</span><span class="pl-kos">;</span> <span class="pl-c">// Chrome 1-12 Non-conform to ECMAScript 5.1</span>
<span class="pl-k">typeof</span> <span class="pl-pds"><span class="pl-c1">/</span>s<span class="pl-c1">/</span></span> <span class="pl-c1">===</span> <span class="pl-s">'object'</span><span class="pl-kos">;</span>   <span class="pl-c">// Firefox 5+  Conform to ECMAScript 5.1</span></pre></div>
<h2 dir="auto">What is the problem?</h2>
<p dir="auto">Information about quirks in very old browser releases seems like a net negative for readers of MDN. It will require readers to make a judgement about whether this could affect them, by testing or looking at release dates for the browsers.</p>
<h2 dir="auto">What did you expect to see?</h2>
<p dir="auto">Irrelevant information should be pruned from MDN after some time. Perhaps some special markup could be used when referring to a specific browser version, so that tools could be written to list information about browser releases too old to be relevant. Such cleanup happens to some extent in BCD, around irrelevant features removed from all browsers for more than 2 years, and also old flag data.</p>
<h2 dir="auto">Did you test this? If so, how?</h2>
<p dir="auto">Searching for "Chrome " + a number of any other browser followed by a number can find many examples like these.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[ecmascript] Need a page on Execution context]]></title>
            <link>https://github.com/mdn/content/issues/5006</link>
            <guid>https://github.com/mdn/content/issues/5006</guid>
            <pubDate>Fri, 14 May 2021 18:14:38 GMT</pubDate>
            <content:encoded><![CDATA[<p dir="auto">MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</a></p>
<h4 dir="auto">What information was incorrect, unhelpful, or incomplete?</h4>
<p dir="auto">I didn't know where exactly to post the issue. I went for "this" cause the value of "this" is strictly related to the execution context.</p>
<h4 dir="auto">Specific section or headline?</h4>
<h4 dir="auto">What did you expect to see?</h4>
<h4 dir="auto">Did you test this? If so, how?</h4>

<details>
<summary>MDN Content page report details</summary>
<ul dir="auto">
<li>Folder: <code class="notranslate">en-us/web/javascript/reference/operators/this</code></li>
<li>MDN URL: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</a></li>
<li>GitHub URL: <a href="https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/this/index.html">https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/operators/this/index.html</a></li>
<li>Last commit: <a class="commit-link" data-hovercard-type="commit" data-hovercard-url="https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9/hovercard" href="https://github.com/mdn/content/commit/13360cbad46b4ce6457f80492d73d2efd252e8a9"><tt>13360cb</tt></a></li>
<li>Document last modified: 2021-05-05T10:31:52.000Z</li>
</ul>
</details>]]></content:encoded>
        </item>
    </channel>
</rss>